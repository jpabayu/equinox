<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns:jms="http://www.mulesoft.org/schema/mule/jms" xmlns:tls="http://www.mulesoft.org/schema/mule/tls"
	xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mule-ss="http://www.mulesoft.org/schema/mule/spring-security"
	xmlns:ss="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/spring-security http://www.mulesoft.org/schema/mule/spring-security/3.1/mule-spring-security.xsd
http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.xsd
http://www.mulesoft.org/schema/mule/tls http://www.mulesoft.org/schema/mule/tls/current/mule-tls.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.mulesoft.org/schema/mule/https http://www.mulesoft.org/schema/mule/https/current/mule-https.xsd
http://www.mulesoft.org/schema/mule/jms http://www.mulesoft.org/schema/mule/jms/current/mule-jms.xsd">


	<flow name="messageUnreadMainConfigFlow">
		<set-variable variableName="tokennc" value="${api.ws.header.token.nc}"
			doc:name="Variable" />
		<expression-component doc:name="Expression">
		<![CDATA[
			msg='<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.bellatrix.org/">
				   <soapenv:Header>
				      <ser:headerAuth>
				         <token>' + flowVars['tokennc'] + '</token>
				      </ser:headerAuth>
				   </soapenv:Header>
				   <soapenv:Body>
				      <ser:countUnreadMessage>
				         <username>' + originalPayload['parentUsername'] + '</username>
				      </ser:countUnreadMessage>
				   </soapenv:Body>
				</soapenv:Envelope>';
			payload = msg;]]>
		</expression-component>
		<http:request config-ref="HTTP_Request_Configuration"
			path="message" method="POST" doc:name="HTTP">
			<http:request-builder>
				<http:header headerName="soapaction" value="&quot;countUnreadMessage&quot;" />
			</http:request-builder>
			<http:success-status-code-validator
				values="200,500" />
		</http:request>
		<byte-array-to-string-transformer
			doc:name="Byte Array to String" />
		<set-variable value="#[xpath3('//status/message')]"
			variableName="status" doc:name="Variable" />
		<choice doc:name="Choice">
			<when expression="#[flowVars['status'] == 'PROCESSED']">
				<set-variable value="#[xpath3('//unread')]"
					variableName="unread" doc:name="Variable" />

				<expression-component doc:name="Expression">
					<![CDATA[msg='<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.bellatrix.org/">
						   <soapenv:Header>
						      <ser:headerAuth>
						         <token>' + flowVars['tokennc'] + '</token>
						      </ser:headerAuth>
						   </soapenv:Header>
						   <soapenv:Body>
						      <ser:loadMessageByUsername>
						         <currentPage>' + originalPayload['currentPage'] + '</currentPage>
						         <pageSize>' + originalPayload['pageSize'] + '</pageSize>
						         <username>' + originalPayload['parentUsername'] + '</username>
						      </ser:loadMessageByUsername>
						   </soapenv:Body>
						</soapenv:Envelope>';
					payload = msg;]]>
				</expression-component>
				<http:request config-ref="HTTP_Request_Configuration"
					path="message" method="POST" doc:name="HTTP">
					<http:request-builder>
						<http:header headerName="soapaction"
							value="&quot;loadMessageByUsername&quot;" />
					</http:request-builder>
					<http:success-status-code-validator
						values="200,500" />
				</http:request>
				<byte-array-to-string-transformer
					doc:name="Byte Array to String" />
				<set-variable value="#[xpath3('//status/message')]"
					variableName="status" doc:name="Variable" />
				<set-variable variableName="messageMaps"
							value="#[new java.util.LinkedList()]" doc:name="Variable" />
				<choice doc:name="Choice">
					<when expression="#[flowVars['status'] == 'PROCESSED']">
						<foreach collection="#[xpath3('//message', payload, 'NODESET')]"
							doc:name="For Each">
							<set-variable variableName="messagePayload"
								value="#[new java.util.HashMap()]" doc:name="Variable" />
							<set-variable value="#[xpath3('//message' + [counter]  + '/subject')]"
								variableName="subject" doc:name="Variable" />
							<set-variable value="#[xpath3('//message' + [counter] + '/body')]"
								variableName="body" doc:name="Variable" />
							<set-variable value="#[xpath3('//message' + [counter] + '/id')]"
								variableName="id" doc:name="Variable" />
							<set-variable value="#[xpath3('//message' + [counter] + '/fromName')]"
								variableName="fromName" doc:name="Variable" />
							<set-variable value="#[xpath3('//message' + [counter] + '/formattedDate')]"
								variableName="formattedDate" doc:name="Variable" />
							<set-variable value="#[xpath3('//message' + [counter] + '/date')]"
								variableName="date" doc:name="Variable" />
							<set-variable value="#[xpath3('//message' + [counter] + '/read')]"
								variableName="isRead" doc:name="Variable" />
							<set-variable
								value="#[xpath3('//message' + [counter] + '/fromUsername')]"
								variableName="fromUsername" doc:name="Variable" />

							<choice>
								<when expression="#[flowVars['isRead'] == false]">
									<expression-transformer
										expression="#[messagePayload['id']=flowVars.id;messagePayload]"
										doc:name="Expression" />
									<expression-transformer
										expression="#[messagePayload['subject']=flowVars.subject;messagePayload]"
										doc:name="Expression" />
									<expression-transformer
										expression="#[messagePayload['body']=flowVars.body;messagePayload]"
										doc:name="Expression" />
									<expression-transformer
										expression="#[messagePayload['fromName']=flowVars.fromName;messagePayload]" />
									<expression-transformer
										expression="#[messagePayload['fromUsername']=flowVars.fromUsername;messagePayload]" />
									<expression-transformer
										expression="#[messagePayload['date']=flowVars.date;messagePayload]" />
									<expression-transformer
										expression="#[messagePayload['formattedDate']=flowVars.formattedDate;messagePayload]" />

									<expression-component doc:name="Expression">
										<![CDATA[messageMaps.add(messagePayload);]]>
									</expression-component>
								</when>
								<otherwise>
									<logger level="INFO" message="[DO NOT HAVE UNREAD MESSAGE]" />
								</otherwise>
							</choice>
						</foreach>

						<expression-component doc:name="Expression">
							<![CDATA[respMap = new java.util.HashMap();
								respMap['countUnreadMessage'] = flowVars['unread'];
								respMap['MessageListResponse']=flowVars['messageMaps'];	
								respMap['status']= org.equinox.api.data.StatusBuilder.getStatus('PROCESSED');			
							payload = respMap;]]>
						</expression-component>
					</when>
					<otherwise>
						<expression-component doc:name="Expression">
							<![CDATA[responseMap = new java.util.HashMap();
								responseMap['status']= org.equinox.api.data.StatusBuilder.getStatus(flowVars['status']);			
							payload = responseMap;]]>
						</expression-component>
					</otherwise>
				</choice>
			</when>
			<otherwise>
				<expression-component doc:name="Expression">
					<![CDATA[respMap = new java.util.HashMap();
						respMap['status']= org.equinox.api.data.StatusBuilder.getStatus(status);
					payload = respMap;]]>
				</expression-component>
			</otherwise>
		</choice>
		<flow-ref name="responseHandlerFlow" doc:name="Flow Reference" />
	</flow>

</mule>
