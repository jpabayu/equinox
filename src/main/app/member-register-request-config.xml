<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:vm="http://www.mulesoft.org/schema/mule/vm" xmlns:ws="http://www.mulesoft.org/schema/mule/ws"
	xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:jms="http://www.mulesoft.org/schema/mule/jms" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/jms http://www.mulesoft.org/schema/mule/jms/current/mule-jms.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/ws http://www.mulesoft.org/schema/mule/ws/current/mule-ws.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd">

	<flow name="memberRegisterRequestConfigFlow">
		<set-variable variableName="token" value="${api.ws.header.token}"
			doc:name="Variable" />
		<set-variable
			value="0#[org.apache.commons.lang.StringUtils.substring(originalPayload['msisdn'], 2)]"
			variableName="username" doc:name="Variable" />
		<expression-component doc:name="Expression">
		<![CDATA[
			msg='<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.bellatrix.org/">
			   <soapenv:Header>
			      <ser:headerAuth>
			         <token>' + flowVars['token'] + '</token>
			      </ser:headerAuth>
			   </soapenv:Header>
			   <soapenv:Body>
			      <ser:loadMembersByUsername>
			         <username>' + flowVars['username'] + '</username>
			      </ser:loadMembersByUsername>
			   </soapenv:Body>
			</soapenv:Envelope>';
			payload = msg;]]>
		</expression-component>
		<set-payload
			value="#[org.apache.commons.codec.binary.StringUtils.newStringUtf8(payload.getBytes())]"
			doc:name="Set Payload" />
		<http:request config-ref="HTTP_Request_Configuration"
			path="members" method="POST" doc:name="HTTP">
			<http:request-builder>
				<http:header headerName="soapaction"
					value="&quot;loadMembersByUsername&quot;" />
			</http:request-builder>
		</http:request>
		<byte-array-to-string-transformer
			doc:name="Byte Array to String" />
		<logger level="INFO" message="#[payload]" doc:name="Logger" />
		<set-variable value="#[xpath3('//status/message')]"
			variableName="status" doc:name="Variable" />
		<choice doc:name="Choice">
			<when expression="#[flowVars['status'] == 'PROCESSED']">
				<expression-component doc:name="Expression">
					<![CDATA[
					regMap = new java.util.HashMap();
					regMap['status']= org.equinox.api.data.StatusBuilder.getStatus('MEMBER_ALREADY_REGISTERED');			
					payload = regMap;]]>
				</expression-component>
			</when>
			<otherwise>
				<set-variable value="#[java.util.UUID.randomUUID().toString()]"
					variableName="ticketID" doc:name="Variable" />
				<set-variable
					value="#[org.equinox.api.process.Utils.getRandomNumberInRange(999999)]"
					variableName="otpnonpad" doc:name="Variable" />
				<set-variable
					value="#[org.apache.commons.lang.StringUtils.leftPad(otpnonpad,6,'0')]"
					variableName="otp" doc:name="Variable" />
				<expression-component doc:name="Expression">
					<![CDATA[
					cacheMap = new java.util.HashMap();
					cacheMap['otp']= flowVars['otp'];			
					cacheMap['msisdn']= originalPayload['msisdn'];
					payload = cacheMap;]]>
				</expression-component>
				<vm:outbound-endpoint exchange-pattern="one-way"
					connector-ref="Notification_VM" path="register.request.notification"
					doc:name="VM" />
				<expression-component doc:name="Expression">
					<![CDATA[
					regMap = new java.util.HashMap();
					regMap['methodType']= 'PUT';			
					regMap['name']= 'RegisterRequestMap';
					regMap['key']= ticketID;
					regMap['value']= payload;
					payload = regMap;]]>
				</expression-component>
				<pooled-component>
					<spring-object bean="CacheProcessor" />
				</pooled-component>
				<expression-component doc:name="Expression">
					<![CDATA[
					responseMap = new java.util.LinkedHashMap();
					responseMap['ticketID']= flowVars['ticketID'] + ':' + flowVars['otp'];
					responseList = new java.util.LinkedList();
					responseList = [responseMap];
					regMap = new java.util.HashMap();
					regMap['RegisterRequestResponse']= responseList;	
					regMap['status']= org.equinox.api.data.StatusBuilder.getStatus('PROCESSED');			
					payload = regMap;]]>
				</expression-component>
			</otherwise>
		</choice>
		<flow-ref name="responseHandlerFlow" doc:name="Flow Reference" />
	</flow>

</mule>
