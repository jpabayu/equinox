<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:jms="http://www.mulesoft.org/schema/mule/jms"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/jms http://www.mulesoft.org/schema/mule/jms/current/mule-jms.xsd">

	<sub-flow name="loginValidation">
		<set-variable variableName="token" value="${api.ws.header.token}"
			doc:name="Variable" />
		<expression-component doc:name="Expression">
		<![CDATA[
			msg='<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.bellatrix.org/">
			   <soapenv:Header>
			      <ser:headerAuth>
			         <token>' + flowVars['token'] + '</token>
			      </ser:headerAuth>
			   </soapenv:Header>
			   <soapenv:Body>
			      <ser:loadMembersByUsername>
			         <username>' + originalPayload['username'] + '</username>
			      </ser:loadMembersByUsername>
			   </soapenv:Body>
			</soapenv:Envelope>';
			payload = msg;]]>
		</expression-component>
		<set-payload
			value="#[org.apache.commons.codec.binary.StringUtils.newStringUtf8(payload.getBytes())]" />
		<http:request config-ref="HTTP_Request_Configuration"
			path="members" method="POST" doc:name="HTTP">
			<http:request-builder>
				<http:header headerName="soapaction"
					value="&quot;loadMembersByUsername&quot;" />
			</http:request-builder>
		</http:request>
		<byte-array-to-string-transformer
			doc:name="Byte Array to String" />
		<set-variable value="#[payload]" variableName="loginPayload"
			doc:name="Variable" />
		<set-variable value="#[xpath3('//status/message')]"
			variableName="status" doc:name="Variable" />
		<set-variable value="#[xpath3('//members/groupID')]"
			variableName="groupID" doc:name="Variable" />
		<choice doc:name="Choice">
			<when expression="#[flowVars['status'] == 'PROCESSED']">
				<set-variable variableName="globalConfig" value="#[new java.util.HashMap()]"
					doc:name="Variable" />
				<expression-component doc:name="Expression">
					<![CDATA[
					regMap = new java.util.HashMap();
					regMap['methodType']= 'GET';			
					regMap['name']= 'GlobalConfigMap';
					regMap['key']= 'global';
					payload = regMap;]]>
				</expression-component>
				<pooled-component>
					<spring-object bean="CacheProcessor" />
				</pooled-component>
				<choice>
					<when expression="#[payload == null]">
						<expression-component doc:name="Expression">
						<![CDATA[
						msg='<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.bellatrix.org/">
							   <soapenv:Header>
							      <ser:headerAuth>
							         <token>' + flowVars['token'] + '</token>
							      </ser:headerAuth>
							   </soapenv:Header>
							   <soapenv:Body/>
							</soapenv:Envelope>';
						payload = msg;]]>
						</expression-component>
						<set-payload
							value="#[org.apache.commons.codec.binary.StringUtils.newStringUtf8(payload.getBytes())]" />
						<http:request config-ref="HTTP_Request_Configuration"
							path="globalconfig" method="POST" doc:name="HTTP">
							<http:request-builder>
								<http:header headerName="soapaction"
									value="&quot;loadGlobalConfig&quot;" />
							</http:request-builder>
						</http:request>
						<byte-array-to-string-transformer
							doc:name="Byte Array to String" />
						<foreach collection="#[xpath3('//globalConfig', payload, 'NODESET')]"
							doc:name="For Each">
							<set-variable variableName="tempHeader"
								value="#[xpath3('//globalConfig' + [counter] + '/internalName')]"
								doc:name="Variable" />
							<set-variable variableName="tempValue"
								value="#[xpath3('//globalConfig' + [counter] + '/value')]"
								doc:name="Variable" />
							<expression-transformer
								expression="#[globalConfig[tempHeader]=tempValue;globalConfig]"
								doc:name="Expression" />
						</foreach>
						<expression-component doc:name="Expression">
							<![CDATA[
							regMap = new java.util.HashMap();
							regMap['methodType']= 'PUT';			
							regMap['name']= 'GlobalConfigMap';
							regMap['key']= 'global';
							regMap['value']= globalConfig;
							payload = regMap;]]>
						</expression-component>
						<pooled-component>
							<spring-object bean="CacheProcessor" />
						</pooled-component>
					</when>
					<otherwise>
						<set-variable variableName="globalConfig" value="#[payload]"
							doc:name="Variable" />
						<logger level="INFO" message="[USING Cached Global Config]" />
					</otherwise>
				</choice>
				<set-variable
					value="#[globalConfig['partner.secret.auth.access.type.id']]"
					variableName="accessTypeID" doc:name="Variable" />
				<set-variable value="#[globalConfig['api.allowed.group.id']]"
					variableName="listAllowedGroupID" doc:name="Variable" />
				<expression-component doc:name="Expression">
					<![CDATA[
						msg='<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.bellatrix.org/">
							   <soapenv:Header>
							      <ser:headerAuth>
							         <token>' + flowVars['token'] + '</token>
							      </ser:headerAuth>
							   </soapenv:Header>
							   <soapenv:Body>
							      <ser:getCredential>
							         <accessTypeID>' + flowVars['accessTypeID'] + '</accessTypeID>
							         <username>' + originalPayload['username'] + '</username>
							      </ser:getCredential>
							   </soapenv:Body>
							</soapenv:Envelope>';
						payload = msg;]]>
				</expression-component>
				<set-payload
					value="#[org.apache.commons.codec.binary.StringUtils.newStringUtf8(payload.getBytes())]" />
				<http:request config-ref="HTTP_Request_Configuration"
					path="access" method="POST" doc:name="HTTP">
					<http:request-builder>
						<http:header headerName="soapaction" value="&quot;getCredential&quot;" />
					</http:request-builder>
				</http:request>
				<byte-array-to-string-transformer
					doc:name="Byte Array to String" />
				<set-variable value="#[xpath3('//credential')]"
					variableName="auth_secret" doc:name="Variable" />
				<set-variable value="#[xpath3('//validate')]"
					variableName="validateHash" doc:name="Variable" />
				<set-payload value="#[loginPayload]" />
				<choice doc:name="Choice">
					<when
						expression="#[org.apache.commons.lang.StringUtils.contains(listAllowedGroupID, '[' + groupID + ']')]">
						<foreach collection="#[xpath3('//customFields', payload, 'NODESET')]"
							doc:name="For Each">
							<set-variable variableName="tempHeader"
								value="#[xpath3('//customFields' + [counter] + '/internalName')]"
								doc:name="Variable" />
							<set-variable variableName="tempValue"
								value="#[xpath3('//customFields' + [counter] + '/value')]"
								doc:name="Variable" />
							<expression-transformer
								expression="#[originalPayload[tempHeader]=tempValue;originalPayload]"
								doc:name="Expression" />
						</foreach>
						<choice doc:name="Choice">
							<when expression="#[org.mule.util.StringUtils.isNotEmpty(auth_secret)]">
								<expression-transformer
									expression="#[originalPayload['auth_secret']=flowVars['auth_secret'];originalPayload]"
									doc:name="Expression" />
								<expression-transformer
									expression="#[originalPayload['validateHash']=validateHash;originalPayload]"
									doc:name="Expression" />
								<set-payload value="ALLOWED" doc:name="Set Payload" />
								<logger level="INFO"
									message="[VALIDATION : USER #[originalPayload['username']] ALLOWED To LOGIN]" />
							</when>
							<otherwise>
								<set-payload value="INVALID_PARAMETER" doc:name="Set Payload" />
								<logger level="INFO"
									message="[VALIDATION : USER (#[originalPayload['username']]) FAILED To LOGIN : INVALID PARAMETER]" />
							</otherwise>
						</choice>
					</when>
					<otherwise>
						<set-payload value="UNAUTHORIZED_ACCESS" doc:name="Set Payload" />
						<logger level="INFO"
							message="[VALIDATION : USER (#[originalPayload['username']]) FAILED To LOGIN : UNAUTHORIZED_ACCESS]" />
					</otherwise>
				</choice>
			</when>
			<otherwise>
				<set-payload value="#[flowVars['status']]" doc:name="Set Payload" />
				<logger level="INFO"
					message="[VALIDATION : USER (#[originalPayload['username']]) FAILED To LOGIN : #[flowVars['status']]]" />
			</otherwise>
		</choice>
	</sub-flow>

	<sub-flow name="tokenValidation">
		<pooled-component>
			<spring-object bean="JWTDecoder" />
		</pooled-component>
		<set-variable variableName="token" value="${api.ws.header.token}"
			doc:name="Variable" />
		<expression-component doc:name="Expression">
		<![CDATA[
			msg='<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.bellatrix.org/">
			   <soapenv:Header>
			      <ser:headerAuth>
			         <token>' + flowVars['token'] + '</token>
			      </ser:headerAuth>
			   </soapenv:Header>
			   <soapenv:Body>
			      <ser:loadMembersByUsername>
			         <username>' + payload + '</username>
			      </ser:loadMembersByUsername>
			   </soapenv:Body>
			</soapenv:Envelope>';
			payload = msg;]]>
		</expression-component>
		<set-payload
			value="#[org.apache.commons.codec.binary.StringUtils.newStringUtf8(payload.getBytes())]" />
		<http:request config-ref="HTTP_Request_Configuration"
			path="members" method="POST" doc:name="HTTP">
			<http:request-builder>
				<http:header headerName="soapaction"
					value="&quot;loadMembersByUsername&quot;" />
			</http:request-builder>
		</http:request>
		<byte-array-to-string-transformer
			doc:name="Byte Array to String" />
		<set-variable value="#[xpath3('//status/message')]"
			variableName="status" doc:name="Variable" />
		<set-variable value="#[xpath3('//members/id')]"
			variableName="parentID" doc:name="Variable" />
		<set-variable value="#[xpath3('//members/name')]"
			variableName="parentName" doc:name="Variable" />
		<set-variable value="#[xpath3('//members/username')]"
			variableName="parentUsername" doc:name="Variable" />
		<choice doc:name="Choice">
			<when expression="#[flowVars['status'] == 'PROCESSED']">
				<foreach collection="#[xpath3('//customFields', payload, 'NODESET')]"
					doc:name="For Each">
					<set-variable variableName="tempHeader"
						value="#[xpath3('//customFields' + [counter] + '/internalName')]"
						doc:name="Variable" />
					<set-variable variableName="tempValue"
						value="#[xpath3('//customFields' + [counter] + '/value')]"
						doc:name="Variable" />
					<expression-transformer
						expression="#[originalPayload[tempHeader]=tempValue;originalPayload]"
						doc:name="Expression" />
				</foreach>
				<expression-transformer
					expression="#[originalPayload['parentID']=flowVars['parentID'];originalPayload]"
					doc:name="Expression" />
				<expression-transformer
					expression="#[originalPayload['parentName']=flowVars['parentName'];originalPayload]"
					doc:name="Expression" />
				<expression-transformer
					expression="#[originalPayload['parentUsername']=flowVars['parentUsername'];originalPayload]"
					doc:name="Expression" />
				<set-variable variableName="globalConfig" value="#[new java.util.HashMap()]"
					doc:name="Variable" />
				<expression-component doc:name="Expression">
					<![CDATA[
					regMap = new java.util.HashMap();
					regMap['methodType']= 'GET';			
					regMap['name']= 'GlobalConfigMap';
					regMap['key']= 'global';
					payload = regMap;]]>
				</expression-component>
				<pooled-component>
					<spring-object bean="CacheProcessor" />
				</pooled-component>
				<choice>
					<when expression="#[payload == null]">
						<expression-component doc:name="Expression">
						<![CDATA[
						msg='<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.bellatrix.org/">
							   <soapenv:Header>
							      <ser:headerAuth>
							         <token>' + flowVars['token'] + '</token>
							      </ser:headerAuth>
							   </soapenv:Header>
							   <soapenv:Body/>
							</soapenv:Envelope>';
						payload = msg;]]>
						</expression-component>
						<set-payload
							value="#[org.apache.commons.codec.binary.StringUtils.newStringUtf8(payload.getBytes())]" />
						<http:request config-ref="HTTP_Request_Configuration"
							path="globalconfig" method="POST" doc:name="HTTP">
							<http:request-builder>
								<http:header headerName="soapaction"
									value="&quot;loadGlobalConfig&quot;" />
							</http:request-builder>
						</http:request>
						<byte-array-to-string-transformer
							doc:name="Byte Array to String" />
						<foreach collection="#[xpath3('//globalConfig', payload, 'NODESET')]"
							doc:name="For Each">
							<set-variable variableName="tempHeader"
								value="#[xpath3('//globalConfig' + [counter] + '/internalName')]"
								doc:name="Variable" />
							<set-variable variableName="tempValue"
								value="#[xpath3('//globalConfig' + [counter] + '/value')]"
								doc:name="Variable" />
							<expression-transformer
								expression="#[globalConfig[tempHeader]=tempValue;globalConfig]"
								doc:name="Expression" />
						</foreach>
						<expression-component doc:name="Expression">
							<![CDATA[
							regMap = new java.util.HashMap();
							regMap['methodType']= 'PUT';			
							regMap['name']= 'GlobalConfigMap';
							regMap['key']= 'global';
							regMap['value']= globalConfig;
							payload = regMap;]]>
						</expression-component>
						<pooled-component>
							<spring-object bean="CacheProcessor" />
						</pooled-component>
					</when>
					<otherwise>
						<set-variable variableName="globalConfig" value="#[payload]"
							doc:name="Variable" />
						<logger level="INFO" message="[USING Cached Global Config]" />
					</otherwise>
				</choice>
				<set-variable
					value="#[globalConfig['partner.secret.auth.access.type.id']]"
					variableName="secretAuthID" doc:name="Variable" />
				<expression-component doc:name="Expression">
					<![CDATA[
						msg='<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.bellatrix.org/">
						   <soapenv:Header>
						      <ser:headerAuth>
						         <token>' + flowVars['token'] + '</token>
						      </ser:headerAuth>
						   </soapenv:Header>
						   <soapenv:Body>
						      <ser:getCredential>
						         <accessTypeID>' + flowVars['secretAuthID'] + '</accessTypeID>
						         <username>' + originalPayload['parentUsername'] + '</username>
						      </ser:getCredential>
						   </soapenv:Body>
						</soapenv:Envelope>';
						payload = msg;]]>
				</expression-component>
				<set-payload
					value="#[org.apache.commons.codec.binary.StringUtils.newStringUtf8(payload.getBytes())]" />
				<http:request config-ref="HTTP_Request_Configuration"
					path="access" method="POST" doc:name="HTTP">
					<http:request-builder>
						<http:header headerName="soapaction" value="&quot;getCredential&quot;" />
					</http:request-builder>
				</http:request>
				<byte-array-to-string-transformer
					doc:name="Byte Array to String" />
				<set-variable value="#[xpath3('//status/message')]"
					variableName="status" doc:name="Variable" />
				<choice doc:name="Choice">
					<when expression="#[flowVars['status'] == 'PROCESSED']">
						<set-variable value="#[xpath3('//credential')]"
							variableName="authSecret" doc:name="Variable" />
						<set-variable value="#[xpath3('//validate')]"
							variableName="validateHash" doc:name="Variable" />
						<expression-transformer
							expression="#[originalPayload['auth_secret']=flowVars['authSecret'];originalPayload]"
							doc:name="Expression" />
						<expression-transformer
							expression="#[originalPayload['validateHash']=flowVars['validateHash'];originalPayload]"
							doc:name="Expression" />
						<set-payload value="#[originalPayload]" doc:name="Set Payload" />
						<pooled-component>
							<spring-object bean="JWTValidation" />
						</pooled-component>
						<set-payload value="ALLOWED" doc:name="Set Payload" />
						<logger level="INFO"
							message="[VALIDATION : TOKEN Validation (#[originalPayload['parentUsername']]) SUCCESS]" />
					</when>
					<otherwise>
						<set-payload value="#[flowVars['status']]" doc:name="Set Payload" />
					</otherwise>
				</choice>
			</when>
			<otherwise>
				<set-payload value="#[flowVars['status']]" doc:name="Set Payload" />
				<logger level="INFO"
					message="[VALIDATION : TOKEN Validation (#[originalPayload['parentUsername']]) FAILED : #[flowVars['status']]]" />
			</otherwise>
		</choice>
	</sub-flow>

	<sub-flow name="hashValidation">
		<set-variable variableName="auth_secret"
			value="#[originalPayload['auth_secret']]" doc:name="Variable" />
		<set-variable variableName="requestAuthContent"
			value="#[originalPayload['requestAuthContent']]" doc:name="Variable" />
		<set-variable variableName="requestAuth"
			value="#[originalPayload['requestAuth']]" doc:name="Variable" />
		<pooled-component>
			<spring-object bean="HashValidation" />
		</pooled-component>
		<logger level="INFO"
			message="[VALIDATION : HASH Validation (#[originalPayload['parentUsername']]) Status : #[payload]]" />
	</sub-flow>

	<sub-flow name="accessValidation">
		<expression-component doc:name="Expression">
		<![CDATA[
			msg='<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.bellatrix.org/">
			   <soapenv:Header>
			      <ser:headerAuth>
			         <token>' + flowVars['token'] + '</token>
			      </ser:headerAuth>
			   </soapenv:Header>
			   <soapenv:Body>
			      <ser:loadMembersByUsername>
			         <username>' + originalPayload['fromMember'] + '</username>
			      </ser:loadMembersByUsername>
			   </soapenv:Body>
			</soapenv:Envelope>';
			payload = msg;]]>
		</expression-component>
		<set-payload
			value="#[org.apache.commons.codec.binary.StringUtils.newStringUtf8(payload.getBytes())]" />
		<http:request config-ref="HTTP_Request_Configuration"
			path="members" method="POST" doc:name="HTTP">
			<http:request-builder>
				<http:header headerName="soapaction"
					value="&quot;loadMembersByUsername&quot;" />
			</http:request-builder>
		</http:request>
		<byte-array-to-string-transformer
			doc:name="Byte Array to String" />
		<set-variable value="#[xpath3('//status/message')]"
			variableName="status" doc:name="Variable" />
		<choice doc:name="Choice">
			<when expression="#[flowVars['status'] == 'PROCESSED']">
				<set-variable value="#[xpath3('//members/groupID')]"
					variableName="fromGroupID" doc:name="Variable" />
				<set-variable value="#[xpath3('//members/email')]"
					variableName="fromEmail" doc:name="Variable" />
				<foreach collection="#[xpath3('//customFields', payload, 'NODESET')]"
					doc:name="For Each">
					<set-variable variableName="tempHeader"
						value="#[xpath3('//customFields' + [counter] + '/internalName')]"
						doc:name="Variable" />
					<set-variable variableName="tempValue"
						value="#[xpath3('//customFields' + [counter] + '/value')]"
						doc:name="Variable" />
					<expression-transformer
						expression="#[originalPayload[tempHeader]=tempValue;originalPayload]"
						doc:name="Expression" />
				</foreach>

				<set-variable variableName="externalMap" value="#[new java.util.HashMap()]"
					doc:name="Variable" />

				<choice doc:name="Choice">
					<when
						expression="#[originalPayload['parentUsername'] != originalPayload['fromMember']]">

						<foreach collection="#[xpath3('//externalMembers', payload, 'NODESET')]"
							doc:name="For Each">
							<set-variable variableName="pid"
								value="#[xpath3('//externalMembers' + [counter] + '/parentID')]"
								doc:name="Variable" />
							<set-variable variableName="externalID"
								value="#[xpath3('//externalMembers' + [counter] + '/externalID')]"
								doc:name="Variable" />
							<set-variable variableName="externalDescription"
								value="#[xpath3('//externalMembers' + [counter] + '/description')]"
								doc:name="Variable" />
							<expression-component doc:name="Expression"> 
								<![CDATA[ externalMembers = new org.equinox.api.data.ExternalMembers(); 
								externalMembers.parentID = flowVars['pid']; 
								externalMembers.externalID = flowVars['externalID']; 
								externalMembers.description = flowVars['externalDescription']; 
								payload = externalMembers;]]>
							</expression-component>
							<expression-transformer expression="#[externalMap[pid]=payload;externalMap]"
								doc:name="Expression" />
						</foreach>
						<set-variable value="#[originalPayload['parentID']]"
							variableName="pid" doc:name="Variable" />
						<choice doc:name="Choice">
							<when expression="#[flowVars['externalMap'][pid] != null]">
								<expression-transformer
									expression="#[originalPayload['externalMembers']=flowVars['externalMap'][pid];originalPayload]"
									doc:name="Expression" />
								<set-payload value="#[originalPayload]" doc:name="Set Payload" />
								<pooled-component>
									<spring-object bean="JWTValidation" />
								</pooled-component>
								<set-payload value="ALLOWED" doc:name="Set Payload" />
								<logger level="INFO"
									message="[VALIDATION : USER (#[originalPayload['parentUsername']]) IS ALLOWED To Access member #[originalPayload['fromMember']]]" />
							</when>
							<otherwise>
								<set-payload value="UNAUTHORIZED_MEMBER_ACCESS"
									doc:name="Set Payload" />
								<logger level="INFO"
									message="[VALIDATION : USER (#[originalPayload['parentUsername']]) IS NOT ALLOWED To Access member #[originalPayload['fromMember']]]" />
							</otherwise>
						</choice>
					</when>
					<otherwise>
						<set-payload value="ALLOWED" doc:name="Set Payload" />
					</otherwise>
				</choice>
			</when>
			<otherwise>
				<set-payload value="#[flowVars['status']]" doc:name="Set Payload" />
			</otherwise>
		</choice>
	</sub-flow>

</mule>