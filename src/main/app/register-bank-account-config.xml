<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
	xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml" xmlns:ws="http://www.mulesoft.org/schema/mule/ws"
	xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:jms="http://www.mulesoft.org/schema/mule/jms" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd 
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/jms http://www.mulesoft.org/schema/mule/jms/current/mule-jms.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/ws http://www.mulesoft.org/schema/mule/ws/current/mule-ws.xsd">

	<flow name="bankAccountRegisterConfirmationConfigFlow">
		<set-variable variableName="reqID" value="#[message.id]"
			doc:name="Variable" />
		<set-variable variableName="otp"
			value="#[org.equinox.api.process.Utils.GenerateRandomNumber(6)]"
			doc:name="Variable" />
		<expression-component doc:name="Expression">
			<![CDATA[
			regMap = new java.util.HashMap();
			regMap['methodType']= 'PUT';			
			regMap['name']= 'RegisterAccountMap';
			regMap['key']= flowVars['reqID'] + flowVars['otp'];
			regMap['value']= originalPayload;
			payload = regMap;]]>
		</expression-component>
		<pooled-component>
			<spring-object bean="CacheProcessor" />
		</pooled-component>
		<choice>
			<when
				expression="#[org.apache.commons.lang.StringUtils.startsWith(originalPayload['fromMember'], 0) == true]">
				<set-variable
					value="62#[org.apache.commons.lang.StringUtils.substring(originalPayload['fromMember'], 1)]"
					variableName="msisdn" doc:name="Variable" />
			</when>
			<otherwise>
				<set-variable
					value="#[originalPayload['parentMsisdn']]"
					variableName="msisdn" doc:name="Variable" />
			</otherwise>
		</choice>

		<expression-component doc:name="Expression">
			<![CDATA[
			regMap = new java.util.HashMap();
			regMap['otp']= flowVars['otp'];			
			regMap['msisdn']= flowVars['msisdn'];
			payload = regMap;]]>
		</expression-component>
		<vm:outbound-endpoint exchange-pattern="one-way"
			connector-ref="Notification_VM" path="bank.account.register.notification"
			doc:name="VM" />
		<expression-component doc:name="Expression">
			<![CDATA[
				reqIdMap = new java.util.HashMap();
				reqIdMap['ticketID']= flowVars['reqID'];
				responseList = new java.util.LinkedList();
				responseList = [reqIdMap];
				responseMap = new java.util.HashMap();
				responseMap['RegisterBankAccountResponse']= responseList;
				responseMap['status']= org.equinox.api.data.StatusBuilder.getStatus('PROCESSED');			
				payload = responseMap;]]>
		</expression-component>
		<flow-ref name="responseHandlerFlow" doc:name="Flow Reference" />
	</flow>

	<flow name="confirmBankAccountRegisterConfigFlow">
		<expression-component doc:name="Expression">
			<![CDATA[
			regMap = new java.util.HashMap();
			regMap['methodType']= 'GET';			
			regMap['name']= 'RegisterAccountMap';
			regMap['key']= originalPayload['ticketID'] + originalPayload['otp'];
			payload = regMap;]]>
		</expression-component>
		<pooled-component>
			<spring-object bean="CacheProcessor" />
		</pooled-component>
		<choice>
			<when expression="#[payload != null]">
				<set-variable variableName="tokennc" value="${api.ws.header.token.nc}"
					doc:name="Variable" />
				<expression-component doc:name="Expression">
		<![CDATA[
			msg='<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.bellatrix.org/">
			   <soapenv:Header>
			      <ser:headerAuth>
			         <token>' + flowVars['tokennc'] + '</token>
			      </ser:headerAuth>
			   </soapenv:Header>
			   <soapenv:Body>
			      <ser:registerAccountTransfer>
			         <accountName>' + payload['accountName'] + '</accountName>
			         <accountNo>' + payload['accountNo'] + '</accountNo>
			         <bankID>' + payload['bankID'] + '</bankID>
			         <description>' + payload['description'] + '</description>
			         <username>' + payload['fromMember'] + '</username>
			      </ser:registerAccountTransfer>
			   </soapenv:Body>
			</soapenv:Envelope>';
			payload = msg;]]>
				</expression-component>
				<http:request config-ref="HTTP_Request_Configuration"
					path="interbanks" method="POST" doc:name="HTTP">
					<http:request-builder>
						<http:header headerName="soapaction"
							value="&quot;registerAccountTransfer&quot;" />
					</http:request-builder>
					<http:success-status-code-validator
						values="200,500" />
				</http:request>
				<byte-array-to-string-transformer
					doc:name="Byte Array to String" />
				<set-variable value="#[xpath3('//faultstring')]"
					variableName="exception" doc:name="Variable" />
				<choice>
					<when
						expression="#[org.mule.util.StringUtils.isNotEmpty(flowVars['exception'])]">
						<expression-component doc:name="Expression">
							<![CDATA[
							responseMap = new java.util.HashMap();
							responseMap['status']= org.equinox.api.data.StatusBuilder.getStatus(flowVars['exception']);			
							payload = responseMap;]]>
						</expression-component>
					</when>
					<otherwise>
						<expression-component doc:name="Expression">
							<![CDATA[
							responseMap = new java.util.HashMap();
							responseMap['status']= org.equinox.api.data.StatusBuilder.getStatus('PROCESSED');			
							payload = responseMap;]]>
						</expression-component>
					</otherwise>
				</choice>
			</when>
			<otherwise>
				<expression-component doc:name="Expression">
					<![CDATA[
					responseMap = new java.util.HashMap();
					responseMap['status']= org.equinox.api.data.StatusBuilder.getStatus('INVALID_OTP');			
					payload = responseMap;]]>
				</expression-component>
			</otherwise>
		</choice>
		<flow-ref name="responseHandlerFlow" doc:name="Flow Reference" />
	</flow>

	<flow name="registerBankAccountConfigFlow">
		<set-variable variableName="tokennc" value="${api.ws.header.token.nc}"
			doc:name="Variable" />
		<expression-component doc:name="Expression">
			<![CDATA[
				msg='<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.bellatrix.org/">
				   <soapenv:Header>
				      <ser:headerAuth>
				         <token>' + flowVars['tokennc'] + '</token>
				      </ser:headerAuth>
				   </soapenv:Header>
				   <soapenv:Body>
				      <ser:registerAccountTransfer>
				         <accountName>' + originalPayload['accountName'] + '</accountName>
				         <accountNo>' + originalPayload['accountNo'] + '</accountNo>
				         <bankID>' + originalPayload['bankID'] + '</bankID>
				         <description>' + originalPayload['description'] + '</description>
				         <username>' + originalPayload['parentUsername'] + '</username>
				      </ser:registerAccountTransfer>
				   </soapenv:Body>
				</soapenv:Envelope>';
			payload = msg;]]>
		</expression-component>
		<http:request config-ref="HTTP_Request_Configuration"
			path="interbanks" method="POST" doc:name="HTTP">
			<http:request-builder>
				<http:header headerName="soapaction"
					value="&quot;registerAccountTransfer&quot;" />
			</http:request-builder>
			<http:success-status-code-validator
				values="200,500" />
		</http:request>
		<byte-array-to-string-transformer
			doc:name="Byte Array to String" />
		<set-variable value="#[xpath3('//faultstring')]"
			variableName="exception" doc:name="Variable" />
		<choice>
			<when
				expression="#[org.mule.util.StringUtils.isNotEmpty(flowVars['exception'])]">
				<expression-component doc:name="Expression">
					<![CDATA[
						responseMap = new java.util.HashMap();
						responseMap['status']= org.equinox.api.data.StatusBuilder.getStatus(flowVars['exception']);			
					payload = responseMap;]]>
				</expression-component>
			</when>
			<otherwise>
				<expression-component doc:name="Expression">
					<![CDATA[
						responseMap = new java.util.HashMap();
						responseMap['status']= org.equinox.api.data.StatusBuilder.getStatus('PROCESSED');			
					payload = responseMap;]]>
				</expression-component>
			</otherwise>
		</choice>

		<flow-ref name="responseHandlerFlow" doc:name="Flow Reference" />
	</flow>
</mule>
