<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:vm="http://www.mulesoft.org/schema/mule/vm" xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" version="CE-3.8.1"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd 
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd 
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd">

	<flow name="qrisCreditConfigFlow">
		<set-variable variableName="originalPayload" value="#[payload]"
			doc:name="Variable" />
		<set-variable variableName="tokennc" value="${api.ws.header.token.nc}"
			doc:name="Variable" />
		<set-variable variableName="responseMap" value="#[new java.util.HashMap()]"
			doc:name="Variable" />
		<expression-component doc:name="Expression">
			<![CDATA[
				msg='<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.bellatrix.org/">
	   			<soapenv:Header>
	 		     <ser:headerAuth>
	 	        <token>' + flowVars['token'] + '</token>
				   </ser:headerAuth>
				   </soapenv:Header>
				   <soapenv:Body>
				      <ser:validateCredential>
				         <accessTypeID>1</accessTypeID>
				         <credential>' + originalPayload['credential'] + '</credential>
				         <username>' + originalPayload['username'] + '</username>
				      </ser:validateCredential>
				   </soapenv:Body>
				</soapenv:Envelope>';
			payload = msg;]]>
		</expression-component>
		<http:request config-ref="HTTP_Request_Configuration"
			path="access" method="POST" doc:name="HTTP">
			<http:request-builder>
				<http:header headerName="soapaction" value="&quot;validateCredential&quot;" />
			</http:request-builder>
		</http:request>
		<byte-array-to-string-transformer
			doc:name="Byte Array to String" />
		<logger
			message="[#[flowVars.correlationID + ' ' + flowVars.action]  VALIDATE CREDENTIAL RESPONSE : #[payload]]"
			level="INFO" doc:name="Logger" />
		<set-variable value="#[xpath3('//status/message')]"
			variableName="status" doc:name="Variable" />
		<choice>
			<when expression="#[flowVars['status'] == 'VALID']">
				<expression-component doc:name="Expression">
					<![CDATA[regMap = new java.util.HashMap();
						regMap['methodType']= 'GET';			
						regMap['name']= 'qrisInquiryMap';
						regMap['key']= originalPayload['transactionKey'];
					payload = regMap;]]>
				</expression-component>
				<pooled-component>
					<spring-object bean="CacheProcessor" />
				</pooled-component>
				<choice>
					<when expression="#[payload == null]">
						<expression-component doc:name="Expression">
							<![CDATA[responseMap = new java.util.HashMap();
								responseMap['status']= org.equinox.api.data.StatusBuilder.getStatus('NO_TRANSACTION');			
							payload = responseMap;]]>
						</expression-component>
					</when>
					<otherwise>
						<set-variable variableName="qrisGWGeneratorCache"
							value="#[(org.equinox.api.qris.process.QrisGWInquiry)payload]"
							doc:name="Variable" />
						<choice>
							<when expression="#[flowVars.qrisGWGeneratorCache != null]">
								<set-variable variableName="qrisGWGenerator" value=""
									doc:name="Variable" />
								<expression-component doc:name="Expression">
									<![CDATA[
										flowVars.qrisGWGenerator = new org.equinox.api.qris.gateway.QrisGWCredit(
										flowVars.qrisGWGeneratorCache,
										flowVars.originalPayload.getAmount(),
										flowVars.originalPayload.getConvenienceFee());]]>
								</expression-component>
								<set-variable variableName="totalAmount"
									value="#[flowVars.qrisGWGenerator.getTotalAmount()]" doc:name="Variable" />
								<choice doc:name="Choice">
									<when
										expression="#[flowVars.totalAmount.compareTo(org.equinox.api.qris.gateway.QrisGWBaseGenerator.getMinTransactionAmount()) == -1]">
										<expression-component doc:name="Expression">
											<![CDATA[
												flowVars.responseMap['status'] = org.equinox.api.data.StatusBuilder.getStatus('TRANSACTION_AMOUNT_BELOW_LIMIT');
											payload = flowVars.responseMap;]]>
										</expression-component>
										<flow-ref name="responseHandlerFlow" doc:name="Flow Reference" />
									</when>
									<when
										expression="#[flowVars.totalAmount.compareTo(org.equinox.api.qris.gateway.QrisGWBaseGenerator.getMaxTransactionAmount()) == 1]">
										<expression-component doc:name="Expression">
											<![CDATA[
												flowVars.responseMap['status'] = org.equinox.api.data.StatusBuilder.getStatus('TRANSACTION_AMOUNT_ABOVE_LIMIT');
											payload = flowVars.responseMap;]]>
										</expression-component>
									</when>
									<otherwise>
										<set-variable variableName="traceNumber"
											value="#[org.equinox.api.process.Utils.generateTraceNumber('qris', null)]"
											doc:name="Variable" />
										<set-variable variableName="qrisCreditResponse"
											value="#[new org.equinox.api.qris.data.QrisCreditResponse()]"
											doc:name="Variable" />
										<set-variable variableName="qrisTransferTypeId"
											value="#[flowVars.qrisGWGenerator.getTransferTypeId()]"
											doc:name="Variable" />
										<set-variable variableName="referenceNumber"
											value="" doc:name="Variable" />
										<expression-component doc:name="Expression">
											<![CDATA[
												flowVars.qrisGWGenerator.setTraceNumber(flowVars.traceNumber);
												
												flowVars.qrisCreditResponse.setAcquirerDomain(flowVars.qrisGWGenerator.getAcquirerDomain());
												flowVars.qrisCreditResponse.setMerchantPAN(flowVars.qrisGWGenerator.getMerchantPAN());
												flowVars.qrisCreditResponse.setMerchantID(flowVars.qrisGWGenerator.getMerchantID());
												flowVars.qrisCreditResponse.setMerchantName(flowVars.qrisGWGenerator.getMerchantName());
												flowVars.qrisCreditResponse.setMerchantCity(flowVars.qrisGWGenerator.getMerchantCity());
												flowVars.qrisCreditResponse.setMerchantCriteria(flowVars.qrisGWGenerator.getMerchantCriteria());  
												flowVars.qrisCreditResponse.setMerchantType(flowVars.qrisGWGenerator.getMerchantType()); 
												flowVars.qrisCreditResponse.setCountryCode(flowVars.qrisGWGenerator.getCountryCode()); 
												flowVars.qrisCreditResponse.setPostalCode(flowVars.qrisGWGenerator.getPostalCode()); 
												flowVars.qrisCreditResponse.setAdditionalData(flowVars.qrisGWGenerator.getAdditionalData()); 
												flowVars.qrisCreditResponse.setAcceptorTID(flowVars.qrisGWGenerator.getAcceptorTID());
												flowVars.qrisCreditResponse.setTransactionCurrency(flowVars.qrisGWGenerator.getTransactionCurrency());
												flowVars.qrisCreditResponse.setPercentageTip(flowVars.qrisGWGenerator.isPercentageTip());
												flowVars.qrisCreditResponse.setAmount(flowVars.qrisGWGenerator.getAmount());
												flowVars.qrisCreditResponse.setConvenienceFee(flowVars.qrisGWGenerator.getConvenienceFee());
												flowVars.qrisCreditResponse.setTotalAmount(flowVars.totalAmount);
												flowVars.qrisCreditResponse.setTraceNumber(null);
												flowVars.qrisCreditResponse.setReferenceNumber(null);
											]]>
										</expression-component>
										<choice doc:name="Choice">
											<when expression="#[flowVars.qrisGWGenerator.isMerchantOnUs() == true]">
												<expression-component doc:name="Expression"><![CDATA[
											sb = new java.lang.StringBuilder();
											calendar = java.util.Calendar.getInstance(TimeZone.getTimeZone("GMT" + "+07:00"));
											localDate = org.equinox.api.qris.iso.ISOUtils.getLocalTransactionDate(sb, calendar);
											
											random = new java.util.Random();
											stan = flowVars.qrisGWGenerator.getStan();
											
											flowVars.referenceNumber = flowVars.qrisGWGenerator.getRrn() + '0' + localDate + stan;]]>
												</expression-component>
												<flow-ref name="qrisCreditOnUsFlow" doc:name="Flow Reference" />
											</when>
											<otherwise>
												<expression-component doc:name="Expression">
											<![CDATA[
												flowVars.referenceNumber = flowVars.qrisGWGenerator.getRrn() + '1';
											]]>
												</expression-component>
												<flow-ref name="qrisCreditOffUsFlow" doc:name="Flow Reference" />
											</otherwise>
										</choice>
									</otherwise>
								</choice>
							</when>
							<otherwise>
								<expression-component doc:name="Expression">
									<![CDATA[
										responseMap = new java.util.HashMap();
										responseMap['status']= org.equinox.api.data.StatusBuilder.getStatus('NO_TRANSACTION');			
									payload = responseMap;]]>
								</expression-component>
							</otherwise>
						</choice>
					</otherwise>
				</choice>
			</when>
			<otherwise>
				<expression-component doc:name="Expression">
					<![CDATA[
					responseMap = new java.util.HashMap();
					responseMap['status']= org.equinox.api.data.StatusBuilder.getStatus(flowVars['status']);			
					payload = responseMap;]]>
				</expression-component>
			</otherwise>
		</choice>
	</flow>

	<sub-flow name="qrisCreditOnUsFlow">
		<choice doc:name="Choice">
			<when expression="#[flowVars.qrisGWGenerator.isStaticQR() == false]">
				<choice doc:name="Choice">
					<when
						expression="#[org.apache.commons.lang.StringUtils.isBlank(flowVars.qrisInvoiceId) == false]">
						<expression-component doc:name="Expression">
							<![CDATA[					
								hazelcastMap = new java.util.HashMap();
								hazelcastMap['methodType'] = 'GET';
								hazelcastMap['name'] = 'qrisInvoiceMap';
								hazelcastMap['key'] = flowVars.qrisInvoiceId;
							payload = hazelcastMap;]]>
						</expression-component>
						<pooled-component>
							<spring-object bean="CacheProcessor" />
						</pooled-component>
						<set-variable variableName="qrisInvoiceIdExist"
							value="#[payload]" doc:name="Variable" />

						<choice>
							<when
								expression="#[flowVars.qrisInvoiceIdExist == null || ((flowVars.qrisInvoiceIdExist instanceof org.mule.transport.NullPayload) == true)]">
								<expression-component doc:name="Expression">
									<![CDATA[
										hazelcastMap = new java.util.HashMap();
										hazelcastMap['methodType'] = 'PUT';
										hazelcastMap['name'] = 'qrisInvoiceMap';
										hazelcastMap['key'] = flowVars.qrisInvoiceId;
										hazelcastMap['value'] = true;
										hazelcastMap['ttl'] = ${qris.cache.ttl.invoice};
									payload = hazelcastMap;]]>
								</expression-component>
								<pooled-component>
									<spring-object bean="CacheProcessor" />
								</pooled-component>
							</when>
							<otherwise>
								<expression-component doc:name="Expression">
									<![CDATA[
										responseMap = new java.util.HashMap();
										responseMap['status']= org.equinox.api.data.StatusBuilder.getStatus('INVALID_QR');			
									payload = responseMap;]]>
								</expression-component>
							</otherwise>
						</choice>
					</when>
					<otherwise>
						<logger level="INFO" message="Do Payment" />
					</otherwise>
				</choice>
			</when>
			<otherwise>
				<logger level="INFO" message="Do Payment" />
			</otherwise>
		</choice>

		<expression-component doc:name="Expression">
		<![CDATA[
			msg='<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.bellatrix.org/">
				   <soapenv:Header>
				      <ser:headerAuth>
				         <token>' + flowVars['tokennc'] + '</token>
				      </ser:headerAuth>
				   </soapenv:Header>
				   <soapenv:Body>
				      <ser:doPayment>
				         <amount>' + flowVars.totalAmount + '</amount>
				         <description>Qris Payment</description>
				         <fromMember>' + originalPayload['fromMember'] + '</fromMember>
				         <toMember>' + flowVars.qrisGWGenerator.getMerchantID() + '</toMember>
				         <traceNumber>' + originalPayload['parentID'] + '' + flowVars.traceNumber + '</traceNumber>
				         <transferTypeID>' + flowVars.qrisTransferTypeId + '</transferTypeID>
				         <referenceNumber>' + flowVars.referenceNumber + '</referenceNumber>
				         <originator>' + flowVars.qrisGWGenerator.getMerchantPAN() + '</originator>
				      </ser:doPayment>
				   </soapenv:Body>
				</soapenv:Envelope>';
			payload = msg;]]>
		</expression-component>
		<set-payload
			value="#[org.apache.commons.codec.binary.StringUtils.newStringUtf8(payload.getBytes())]" />
		<http:request config-ref="HTTP_Request_Configuration"
			path="payments" method="POST" doc:name="HTTP">
			<http:request-builder>
				<http:header headerName="soapaction" value="&quot;doPayment&quot;" />
			</http:request-builder>
		</http:request>
		<byte-array-to-string-transformer
			doc:name="Byte Array to String" />
		<set-variable value="#[xpath3('//status/message')]"
			variableName="status" doc:name="Variable" />

		<choice doc:name="Choice">
			<when expression="#[flowVars['status'] != 'PROCESSED']">
				<expression-component doc:name="Expression">
					<![CDATA[
						hazelcastMap = new java.util.HashMap();
						hazelcastMap['methodType'] = 'DELETE';
						hazelcastMap['name'] = 'qrisInquiryMap';
						hazelcastMap['key'] = flowVars.originalPayload.transactionKey;
					payload = hazelcastMap;]]>
				</expression-component>
				<pooled-component>
					<spring-object bean="CacheProcessor" />
				</pooled-component>
				<expression-component doc:name="Expression">
					<![CDATA[
						flowVars.responseMap['status'] = org.equinox.api.data.StatusBuilder.getStatus(flowVars.status);
					payload = flowVars.responseMap;]]>
				</expression-component>
				<flow-ref name="responseHandlerFlow" doc:name="Flow Reference" />
			</when>
			<otherwise>
				<set-variable value="#[xpath3('//id')]" variableName="transferID"
					doc:name="Variable" />
				<set-variable value="#[xpath3('//fromMember/id')]"
					variableName="fromMemberID" doc:name="Variable" />
				<set-variable value="#[xpath3('//fromMember/name')]"
					variableName="fromMemberName" doc:name="Variable" />
				<set-variable value="#[xpath3('//traceNumber')]"
					variableName="traceNumber" doc:name="Variable" />
				<set-variable value="#[xpath3('//transactionNumber')]"
					variableName="transactionNumber" doc:name="Variable" />
				<expression-component doc:name="Expression">
					<![CDATA[
						flowVars.qrisGWGenerator.setTransferId(flowVars.transferID);
						flowVars.qrisGWGenerator.setCustomerPAN(flowVars.fromMemberID);
						flowVars.qrisGWGenerator.setCustomerName(flowVars.fromMemberName);
						
						flowVars.qrisCreditResponse.setTraceNumber(flowVars.traceNumber);
						flowVars.qrisCreditResponse.setReferenceNumber(flowVars.referenceNumber);
										
						hazelcastMap = new java.util.HashMap();
						hazelcastMap['methodType'] = 'PUT';
						hazelcastMap['name'] = 'qrisCreditMap';
						hazelcastMap['key'] = flowVars.originalPayload.transactionKey;
						hazelcastMap['value'] = flowVars.qrisGWGenerator;
						hazelcastMap['ttl'] = ${qris.cache.ttl.credit};
					payload = hazelcastMap;]]>
				</expression-component>
				<pooled-component>
					<spring-object bean="CacheProcessor" />
				</pooled-component>
				<expression-component doc:name="Expression">
					<![CDATA[
						hazelcastMap = new java.util.HashMap();
						hazelcastMap['methodType'] = 'DELETE';
						hazelcastMap['name'] = 'qrisInquiryMap';
						hazelcastMap['key'] = flowVars.originalPayload.transactionKey;
					payload = hazelcastMap;]]>
				</expression-component>
				<pooled-component>
					<spring-object bean="CacheProcessor" />
				</pooled-component>
				<flow-ref name="qrisNotificationFlow" doc:name="Flow Reference" />
				<expression-component doc:name="Expression">
					<![CDATA[
						flowVars.responseMap['status']= org.equinox.api.data.StatusBuilder.getStatus('PROCESSED');
					payload = flowVars.responseMap;]]>
				</expression-component>
				<flow-ref name="responseHandlerFlow" doc:name="Flow Reference" />
			</otherwise>
		</choice>
	</sub-flow>

	<sub-flow name="qrisCreditOffUsFlow">
		<expression-component doc:name="Expression">
		<![CDATA[
			msg='<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.bellatrix.org/">
				   <soapenv:Header>
				      <ser:headerAuth>
				         <token>' + flowVars['tokennc'] + '</token>
				      </ser:headerAuth>
				   </soapenv:Header>
				   <soapenv:Body>
				      <ser:doPayment>
				         <amount>' + flowVars['totalAmount'] + '</amount>
				         <description>' + flowVars.qrisGWGenerator.getAdditionalData() + '</description>
				         <fromMember>' + originalPayload['fromMember'] + '</fromMember>
				         <toMember>' + flowVars['switchingUsername'] + '</toMember>
				         <traceNumber>' + originalPayload['parentID'] + '' + flowVars.traceNumber + '</traceNumber>
				         <transferTypeID>' + flowVars['qrisTransferTypeId'] + '</transferTypeID>
				         <referenceNumber>' + flowVars.referenceNumber + '</referenceNumber>
				         <originator>' + flowVars.qrisGWGenerator.getMerchantPAN() + '</originator>
				         <status>PENDING</status>
				      </ser:doPayment>
				   </soapenv:Body>
				</soapenv:Envelope>';
			payload = msg;]]>
		</expression-component>
		<set-payload
			value="#[org.apache.commons.codec.binary.StringUtils.newStringUtf8(payload.getBytes())]" />
		<http:request config-ref="HTTP_Request_Configuration"
			path="payments" method="POST" doc:name="HTTP">
			<http:request-builder>
				<http:header headerName="soapaction" value="&quot;doPayment&quot;" />
			</http:request-builder>
		</http:request>
		<byte-array-to-string-transformer
			doc:name="Byte Array to String" />
		<set-variable value="#[xpath3('//status/message')]"
			variableName="status" doc:name="Variable" />
		<choice doc:name="Choice">
			<when expression="#[flowVars['status'] != 'PROCESSED']">
				<expression-component doc:name="Expression">
					<![CDATA[
						hazelcastMap = new java.util.HashMap();
						hazelcastMap['methodType'] = 'DELETE';
						hazelcastMap['name'] = 'qrisInquiryMap';
						hazelcastMap['key'] = flowVars.originalPayload.transactionKey;
					payload = hazelcastMap;]]>
				</expression-component>
				<pooled-component>
					<spring-object bean="CacheProcessor" />
				</pooled-component>
				<expression-component doc:name="Expression">
					<![CDATA[
						flowVars.responseMap['status'] = org.equinox.api.data.StatusBuilder.getStatus(flowVars.status);
					payload = flowVars.responseMap;]]>
				</expression-component>
			</when>
			<otherwise>
				<set-variable value="#[xpath3('//id')]" variableName="transferID"
					doc:name="Variable" />
				<set-variable value="#[xpath3('//fromMember/id')]"
					variableName="fromMemberID" doc:name="Variable" />
				<set-variable value="#[xpath3('//fromMember/name')]"
					variableName="fromMemberName" doc:name="Variable" />
				<set-variable value="#[xpath3('//traceNumber')]"
					variableName="traceNumber" doc:name="Variable" />
				<set-variable value="#[xpath3('//transactionNumber')]"
					variableName="transactionNumber" doc:name="Variable" />
				<expression-component doc:name="Expression">
					<![CDATA[
						flowVars.qrisGWGenerator.setTransferId(flowVars.transferID);
						flowVars.qrisGWGenerator.setCustomerPAN(flowVars.fromMemberID);
						flowVars.qrisGWGenerator.setCustomerName(flowVars.fromMemberName);
										
						hazelcastMap = new java.util.HashMap();
						hazelcastMap['methodType'] = 'PUT';
						hazelcastMap['name'] = 'qrisCreditMap';
						hazelcastMap['key'] = flowVars.originalPayload.transactionKey;
						hazelcastMap['value'] = flowVars.qrisGWGenerator;
						hazelcastMap['ttl'] = ${qris.cache.ttl.credit};
					payload = hazelcastMap;]]>
				</expression-component>
				<pooled-component>
					<spring-object bean="CacheProcessor" />
				</pooled-component>
				<expression-component doc:name="Expression">
					<![CDATA[
						hazelcastMap = new java.util.HashMap();
						hazelcastMap['methodType'] = 'DELETE';
						hazelcastMap['name'] = 'qrisInquiryMap';
						hazelcastMap['key'] = flowVars.originalPayload.transactionKey;
					payload = hazelcastMap;]]>
				</expression-component>
				<pooled-component>
					<spring-object bean="CacheProcessor" />
				</pooled-component>
				<expression-component doc:name="Expression">
					<![CDATA[
						payload = flowVars.qrisGWGenerator.generateRequest();]]>
				</expression-component>
				<logger
					message="[#[flowVars.correlationID + ' ' + flowVars.action] (QRIS GW CREDIT REQUEST) : #[message.payloadAs(java.lang.String)]]"
					level="INFO" doc:name="Logger" />
				<http:request config-ref="HTTP_QRIS_Request_Configuration"
					path="payment/credit" method="POST" doc:name="HTTP">
					<http:request-builder>
						<http:header headerName="Content-Type"
							value="application/x-www-form-urlencoded" />
					</http:request-builder>
				</http:request>
				<logger
					message="[#[flowVars.correlationID + ' ' + flowVars.action] (QRIS GW CREDIT RESPONSE) : #[message.payloadAs(java.lang.String)]]"
					level="INFO" doc:name="Logger" />
				<json:json-to-object-transformer
					returnClass="java.util.HashMap" doc:name="JSON to Object" />
				<set-variable variableName="qrisGwResponse" value="#[payload]"
					doc:name="Variable" />
				<set-payload
					value="#[org.equinox.api.qris.gateway.QrisGWStatusMapper.getequinoxStatus(payload['39'])]"
					doc:name="Set Payload" />
				<choice>
					<when expression="#[payload == 'PROCESSED']">
						<expression-component doc:name="Expression">
							<![CDATA[
							flowVars.responseMap['status']= org.equinox.api.data.StatusBuilder.getStatus('PROCESSED');
							
							flowVars.qrisCreditResponse.setTraceNumber(flowVars.traceNumber);
							flowVars.referenceNumber = flowVars.referenceNumber + org.apache.commons.lang.StringUtils.substring(flowVars.qrisGwResponse['123'],0,10);
							flowVars.qrisCreditResponse.setReferenceNumber(flowVars.referenceNumber);
								
							payload = flowVars.responseMap;]]>
						</expression-component>
					</when>
					<otherwise>
						<expression-component doc:name="Expression">
							<![CDATA[
								flowVars.responseMap['status'] = org.equinox.api.data.StatusBuilder.getStatus(payload);
							payload = flowVars.responseMap;]]>
						</expression-component>
					</otherwise>
				</choice>
			</otherwise>
		</choice>
	</sub-flow>

	<sub-flow name="qrisNotificationFlow">
		<set-variable variableName="notificationSubject"
			value="#['Fello Merchant Receipt (QRIS)']" doc:name="Variable" />
		<set-variable variableName="merchantEmail"
			value="#[flowVars.qrisGWGenerator.getMerchantEmail()]" doc:name="Variable" />
		<set-variable variableName="qrisMpan"
			value="#[flowVars.qrisGWGenerator.getMerchantPAN(false)]" doc:name="Variable" />
		<set-variable variableName="qrisTransactionDateStr"
			value="#[org.equinox.api.process.Utils.getDateTimeWithTimeZone(flowVars.transactionDate)]"
			doc:name="Variable" />
		<set-variable variableName="qrisTotalAmountStr"
			value="#[org.equinox.api.process.Utils.getIDRFormat(flowVars.totalAmount)]"
			doc:name="Variable" />

		<expression-component doc:name="Expression">
			<![CDATA[
			if (flowVars.qrisInvoiceId == null) {
				flowVars.qrisInvoiceId = '-';
			}
			
			messageBody = org.equinox.api.process.Utils.getQRISMerchantReceipt(
				flowVars.acceptedLanguage,
				flowVars.qrisMpan,
				flowVars.qrisGWGenerator.getMerchantID(),
				flowVars.qrisGWGenerator.getMerchantName(),
				flowVars.qrisTransactionDateStr,
				flowVars.transactionNumber,
				flowVars.traceNumber,
				flowVars.qrisGWGenerator.getRrn(),
				flowVars.qrisInvoiceId,
				flowVars.qrisTotalAmountStr
			);
			
			payload = messageBody;]]>
		</expression-component>

		<expression-component doc:name="Expression">
			<![CDATA[
				msg='<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.bellatrix.org/">
					   <soapenv:Header>
					      <ser:headerAuth>
					         <token>' + flowVars['tokennc'] + '</token>
					      </ser:headerAuth>
					   </soapenv:Header>
					   <soapenv:Body>
					      <ser:sendMessage>
					         <body>' + flowVars['messageBody'] + '</body>
					         <fromUsername>flowVars.username</fromUsername>
					         <subject>flowVars.notificationSubject</subject>
					         <toUsername>flowVars.qrisGWGenerator.getMerchantID()</toUsername>
					      </ser:sendMessage>
					   </soapenv:Body>
					</soapenv:Envelope>';
			payload = msg;]]>
		</expression-component>
		<http:request config-ref="HTTP_Request_Configuration"
			path="message" method="POST" doc:name="HTTP">
			<http:request-builder>
				<http:header headerName="soapaction" value="&quot;sendMessage&quot;" />
			</http:request-builder>
		</http:request>
		<byte-array-to-string-transformer
			doc:name="Byte Array to String" />
		<choice doc:name="Choice">
			<when
				expression="#[org.apache.commons.lang.StringUtils.isBlank(flowVars.merchantEmail) == false]">
				<choice doc:name="Choice">
					<when
						expression="#[org.equinox.api.process.Utils.isValidEmail(flowVars.merchantEmail)]">
						<expression-component doc:name="Expression">
							<![CDATA[
								emailContent = new java.util.HashMap();
								emailContent['mpan'] = flowVars.qrisMpan;
								emailContent['mid'] = flowVars.qrisGWGenerator.getMerchantID();
								emailContent['merchantName'] = flowVars.qrisGWGenerator.getMerchantName();
								emailContent['transactionDate'] = flowVars.qrisTransactionDateStr;
								emailContent['transactionNumber'] = flowVars.transactionNumber;
								emailContent['traceNumber'] = flowVars.traceNumber;
								emailContent['rrn'] = flowVars.qrisGWGenerator.getRrn();
								emailContent['invoiceId'] = flowVars.qrisInvoiceId;
								emailContent['amount'] = flowVars.qrisTotalAmountStr;
								emailContent['copyRightYear'] = org.equinox.api.process.Utils.getCurrentYear();
							payload = emailContent;]]>
						</expression-component>

						<choice doc:name="Choice">
							<when expression="#[flowVars.acceptedLanguage == 'en-US']">
								<parse-template
									location="${app.home}/classes/emails/qrisMerchantReceipt.html"
									doc:name="Parse Template" />
							</when>
							<otherwise>
								<parse-template
									location="${app.home}/classes/emails/qrisMerchantReceipt(ID).html"
									doc:name="Parse Template" />
							</otherwise>
						</choice>

						<expression-component doc:name="Expression">
							<![CDATA[
								emailMap = new java.util.HashMap();
								emailMap['logPrefix'] = flowVars.logPrefix;
								emailMap['email'] = flowVars.merchantEmail;
								emailMap['subject'] = flowVars.notificationSubject;
								emailMap['content'] = payload;
							payload = emailMap;]]>
						</expression-component>
						<vm:outbound-endpoint exchange-pattern="one-way"
							path="send.email.notification" connector-ref="Notification_VM"
							doc:name="VM" />
					</when>
					<otherwise>
						<expression-component doc:name="Expression">
						<![CDATA[
							callbackMap = new java.util.HashMap();
							callbackMap['logPrefix'] = flowVars.logPrefix;
							callbackMap['callbackURL'] = flowVars.merchantEmail;
							payload = callbackMap;]]>
						</expression-component>
						<vm:outbound-endpoint exchange-pattern="one-way"
							path="send.url.notification" connector-ref="Notification_VM"
							doc:name="VM" />
					</otherwise>
				</choice>
			</when>
			<otherwise>
				<logger
					message="[#[flowVars.logPrefix] Email not available, abort send email]"
					level="INFO" doc:name="Logger" />
			</otherwise>
		</choice>
	</sub-flow>
</mule>
