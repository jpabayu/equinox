<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:tls="http://www.mulesoft.org/schema/mule/tls"
	xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
	xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" version="CE-3.8.1"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/tls http://www.mulesoft.org/schema/mule/tls/current/mule-tls.xsd 
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd 
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd 
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd">

	<flow name="memberRegisterFlow">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="Member/Register/Request" allowedMethods="POST" doc:name="HTTP" />
		<message-filter doc:name="Filter favicon">
			<not-filter>
				<wildcard-filter pattern="/favicon.ico"
					caseSensitive="true" />
			</not-filter>
		</message-filter>
		<set-variable value="#[message.inboundProperties.'http.method']"
			variableName="method" doc:name="Variable" />
		<custom-transformer class="org.equinox.api.data.MessageTransformer"
			doc:name="Java" />
		<set-variable value="#[message.id]" variableName="correlationID"
			doc:name="Variable" />
		<set-variable variableName="originalPayload" value="#[payload]"
			doc:name="Variable" />
		<expression-transformer
			expression="#[originalPayload['transactionType']=org.apache.commons.lang.StringUtils.substringAfterLast(message.inboundProperties.'http.relative.path', '/');originalPayload]"
			doc:name="Expression" />
		<logger level="INFO"
			message="[{#[correlationID]} : MEMBER-REGISTER Request = #[originalPayload]]"
			doc:name="Logger" />
		<set-property value="memberRegisterRequest" propertyName="type"
			doc:name="Property" />
		<set-property value="#[correlationID]" propertyName="messageID"
			doc:name="Property" />
		<vm:outbound-endpoint exchange-pattern="one-way"
			path="log.request" connector-ref="GrayLog_VM" doc:name="VM" />
		<flow-ref name="memberRegisterRequestValidationFlow"
			doc:name="Flow Reference" />
		<set-property value="memberRegisterRequest" propertyName="type"
			doc:name="Property" />
		<set-property value="#[correlationID]" propertyName="messageID"
			doc:name="Property" />
		<vm:outbound-endpoint exchange-pattern="one-way"
			path="log.response" connector-ref="GrayLog_VM" doc:name="VM" />
		<exception-strategy ref="sessionException"
			doc:name="Reference Exception Strategy" />
	</flow>

	<flow name="memberCreateFlow">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="Member/Register/OTP" allowedMethods="POST" doc:name="HTTP" />
		<custom-transformer class="org.equinox.api.data.MessageTransformer"
			doc:name="Java" />
		<set-variable variableName="token" value="${api.ws.header.token}"
			doc:name="Variable" />
		<set-variable variableName="ticketID" value="#[payload['form-ticketid']]"
			doc:name="Variable" />
		<set-variable variableName="otp" value="#[payload['form-otp']]"
			doc:name="Variable" />
		<expression-component doc:name="Expression">
			<![CDATA[
			regMap = new java.util.HashMap();
			regMap['methodType']= 'GET';			
			regMap['name']= 'RegisterOTPMap';
			regMap['key']= flowVars['ticketID'];
			payload = regMap;]]>
		</expression-component>
		<pooled-component>
			<spring-object bean="CacheProcessor" />
		</pooled-component>
		<set-variable value="#[payload['otp']]" variableName="otpCache"
			doc:name="Variable" />
		<set-variable value="#[payload['msisdn']]" variableName="msisdn"
			doc:name="Variable" />
		<set-variable value="#[payload['name']]" variableName="name"
			doc:name="Variable" />
		<set-variable value="#[payload['email']]" variableName="email"
			doc:name="Variable" />
		<set-variable value="#[payload['parentID']]"
			variableName="parentID" doc:name="Variable" />
		<set-variable value="#[payload['parentUsername']]"
			variableName="parentUsername" doc:name="Variable" />
		<set-variable value="#[payload['parentName']]"
			variableName="parentName" doc:name="Variable" />
		<set-variable variableName="callbackUrl" value="#[payload['callbackUrl']]"
			doc:name="Variable" />
		<set-variable variableName="authSecret" value="#[payload['authSecret']]"
			doc:name="Variable" />
		<set-variable variableName="statusResponse" value=""
			doc:name="Variable" />
		<choice>
			<when expression="#[flowVars['otpCache'] == flowVars['otp']]">
				<set-variable
					value="&lt;description&gt;#[flowVars.parentName]&lt;/description&gt;&lt;externalID&gt;#[flowVars.msisdn]&lt;/externalID&gt;&lt;parentID&gt;#[flowVars.parentID]&lt;/parentID&gt;"
					variableName="ExtID" doc:name="Variable" />

				<expression-component doc:name="Expression">
				<![CDATA[
					msg='<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.bellatrix.org/">
					   <soapenv:Header>
					      <ser:headerAuth>
					         <token>' + flowVars['token'] + '</token>
					      </ser:headerAuth>
					   </soapenv:Header>
					   <soapenv:Body>
					      <ser:registerMembers>
					      	<groupID>3</groupID>
					         <msisdn>' + flowVars['msisdn'] + '</msisdn>
					         <name>' + flowVars['name'] + '</name>
					         <username>' + flowVars['msisdn'] + '</username>
					         <email>' + flowVars['email'] + '</email>
					         <externalMemberFields>
					        		' + ExtID + '
					        	</externalMemberFields>
					      </ser:registerMembers>
					   </soapenv:Body>
					</soapenv:Envelope>';
				payload = msg;]]>
				</expression-component>
				<set-payload
					value="#[org.apache.commons.codec.binary.StringUtils.newStringUtf8(payload.getBytes())]"
					doc:name="Set Payload" />
				<http:request config-ref="HTTP_Request_Configuration"
					path="members" method="POST" doc:name="HTTP">
					<http:request-builder>
						<http:header headerName="soapaction" value="&quot;registerMembers&quot;" />
					</http:request-builder>
					<http:success-status-code-validator
						values="200,500" />
				</http:request>
				<byte-array-to-string-transformer
					doc:name="Byte Array to String" />
				<set-variable value="#[xpath3('//faultstring')]"
					variableName="faultString" doc:name="Variable" />
				<choice doc:name="Choice">
					<when expression="#[org.mule.util.StringUtils.isNotEmpty(faultString)]">
						<expression-component doc:name="Expression">
							<![CDATA[
								regMap = new java.util.HashMap();
								regMap['methodType']= 'DELETE';			
								regMap['name']= 'RegisterOTPMap';
								regMap['key']= flowVars['ticketID'];
							payload = regMap;]]>
						</expression-component>
						<pooled-component>
							<spring-object bean="CacheProcessor" />
						</pooled-component>
						<!-- Callback to Merchant -->
						<expression-component doc:name="Expression">
							<![CDATA[
								memberMap = new java.util.HashMap();
								memberMap['msisdn'] = flowVars['msisdn'];
								memberMap['parentUsername'] = flowVars['parentUsername'];
								memberMap['parentName'] = flowVars['parentName'];
								memberMap['name'] = flowVars['name'];
								memberMap['email'] = flowVars['email'];
								memberMap['callbackUrl'] = flowVars['callbackUrl'];
								memberMap['authSecret'] = flowVars['authSecret'];
								memberMap['statusResponse'] = flowVars['faultString'];
							payload = memberMap;]]>
						</expression-component>
						<flow-ref name="merchantCallbackFlow" />
					</when>
					<otherwise>
						<expression-component doc:name="Expression">
						<![CDATA[
							regMap = new java.util.HashMap();
							regMap['methodType']= 'DELETE';			
							regMap['name']= 'RegisterOTPMap';
							regMap['key']= flowVars['ticketID'];
						payload = regMap;]]>
						</expression-component>
						<pooled-component>
							<spring-object bean="CacheProcessor" />
						</pooled-component>
						<expression-component doc:name="Expression">
							<![CDATA[
								cacheMap = new java.util.HashMap();
									cacheMap['msisdn'] = flowVars['msisdn'];
									cacheMap['parentID'] = flowVars['parentID'];
									cacheMap['parentUsername'] = flowVars['parentUsername'];
									cacheMap['parentName'] = flowVars['parentName'];
									cacheMap['name'] = flowVars['name'];
									cacheMap['email'] = flowVars['email'];
									cacheMap['callbackUrl'] = flowVars['callbackUrl'];
									cacheMap['authSecret'] = flowVars['authSecret'];
								payload = cacheMap;]]>
						</expression-component>
						<expression-component doc:name="Expression">
							<![CDATA[
								regMap = new java.util.HashMap();
									regMap['methodType']= 'PUT';			
									regMap['name']= 'CredentialTokenMap';
									regMap['key']= flowVars['ticketID'] ;
									regMap['value']= payload;
								payload = regMap;]]>
						</expression-component>
						<pooled-component>
							<spring-object bean="CacheProcessor" />
						</pooled-component>
						<parse-template location="MemberRegistrationCredentials.tmp"
							mimeType="text/html" doc:name="Parse Template" />
					</otherwise>
				</choice>
			</when>
			<otherwise>
				<set-variable variableName="statusResponse" value="OTP Not Found/Match"
					doc:name="Variable" />
				<parse-template location="MemberRegistrationOTP.tmp"
					mimeType="text/html" doc:name="Parse Template" />
			</otherwise>
		</choice>
		<set-property propertyName="content-type" value="text/html" />
	</flow>

	<flow name="memberCredentialFlow">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="Member/Register/Credential" allowedMethods="POST" doc:name="HTTP" />
		<custom-transformer class="org.equinox.api.data.MessageTransformer"
			doc:name="Java" />
		<set-variable variableName="token" value="${api.ws.header.token}"
			doc:name="Variable" />
		<set-variable variableName="ticketID" value="#[payload['form-ticketid']]"
			doc:name="Variable" />
		<set-variable variableName="pin" value="#[payload['form-pin']]"
			doc:name="Variable" />
		<set-variable variableName="pin2" value="#[payload['form-pin2']]"
			doc:name="Variable" />
		<expression-component doc:name="Expression">
			<![CDATA[
			regMap = new java.util.HashMap();
			regMap['methodType']= 'GET';			
			regMap['name']= 'CredentialTokenMap';
			regMap['key']= flowVars['ticketID'];
			payload = regMap;]]>
		</expression-component>
		<pooled-component>
			<spring-object bean="CacheProcessor" />
		</pooled-component>
		<set-variable value="#[payload['msisdn']]" variableName="msisdn"
			doc:name="Variable" />
		<set-variable value="#[payload['name']]" variableName="name"
			doc:name="Variable" />
		<set-variable value="#[payload['email']]" variableName="email"
			doc:name="Variable" />
		<set-variable value="#[payload['parentID']]"
			variableName="parentID" doc:name="Variable" />
		<set-variable value="#[payload['parentUsername']]"
			variableName="parentUsername" doc:name="Variable" />
		<set-variable value="#[payload['parentName']]"
			variableName="parentName" doc:name="Variable" />
		<set-variable value="#[payload['callbackUrl']]"
			variableName="callbackUrl" doc:name="Variable" />
		<set-variable variableName="authSecret" value="#[payload['authSecret']]"
			doc:name="Variable" />
		<set-variable variableName="statusResponse" value=""
			doc:name="Variable" />
		<choice>
			<when expression="#[flowVars['pin'] == flowVars['pin2']]">
				<expression-component doc:name="Expression">
					<![CDATA[
					msg='<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.bellatrix.org/">
					   <soapenv:Header>
					      <ser:headerAuth>
					        <token>' + flowVars['token'] + '</token>
					      </ser:headerAuth>
					   </soapenv:Header>
					   <soapenv:Body>
					      <ser:createCredential>
					         <accessTypeID>1</accessTypeID>
					         <credential>' + flowVars['pin'] + '</credential>
					         <username>' + flowVars['msisdn'] + '</username>
					      </ser:createCredential>
					   </soapenv:Body>
					</soapenv:Envelope>';
				payload = msg;]]>
				</expression-component>
				<set-payload
					value="#[org.apache.commons.codec.binary.StringUtils.newStringUtf8(payload.getBytes())]"
					doc:name="Set Payload" />
				<http:request config-ref="HTTP_Request_Configuration"
					path="access" method="POST" doc:name="HTTP">
					<http:request-builder>
						<http:header headerName="soapaction" value="&quot;createCredential&quot;" />
					</http:request-builder>
					<http:success-status-code-validator
						values="200,500" />
				</http:request>
				<expression-component doc:name="Expression">
					<![CDATA[
					msg='<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.bellatrix.org/">
					   <soapenv:Header>
					      <ser:headerAuth>
					        <token>' + flowVars['token'] + '</token>
					      </ser:headerAuth>
					   </soapenv:Header>
					   <soapenv:Body>
					      <ser:createCredential>
					         <accessTypeID>4</accessTypeID>
					         <credential>' + flowVars['pin'] + '</credential>
					         <username>' + flowVars['msisdn'] + '</username>
					      </ser:createCredential>
					   </soapenv:Body>
					</soapenv:Envelope>';
				payload = msg;]]>
				</expression-component>
				<set-payload
					value="#[org.apache.commons.codec.binary.StringUtils.newStringUtf8(payload.getBytes())]"
					doc:name="Set Payload" />
				<http:request config-ref="HTTP_Request_Configuration"
					path="access" method="POST" doc:name="HTTP">
					<http:request-builder>
						<http:header headerName="soapaction" value="&quot;createCredential&quot;" />
					</http:request-builder>
					<http:success-status-code-validator
						values="200,500" />
				</http:request>
				<expression-component doc:name="Expression">
					<![CDATA[
						regMap = new java.util.HashMap();
						regMap['methodType']= 'DELETE';			
						regMap['name']= 'CredentialTokenMap';
						regMap['key']= flowVars['ticketID'];
					payload = regMap;]]>
				</expression-component>
				<pooled-component>
					<spring-object bean="CacheProcessor" />
				</pooled-component>
				<set-variable
					value="62#[org.apache.commons.lang.StringUtils.substring(flowVars['msisdn'], 1)]"
					variableName="msisdn" doc:name="Variable" />
				<expression-component doc:name="Expression">
					<![CDATA[
						cacheMap = new java.util.HashMap();
						cacheMap['parentName'] = flowVars['parentName'];
						cacheMap['msisdn']= flowVars['msisdn'];
					payload = cacheMap;]]>
				</expression-component>
				<logger level="INFO" message="Notification Registration: #[payload]"
					doc:name="Logger" />
				<vm:outbound-endpoint exchange-pattern="one-way"
					connector-ref="Notification_VM" path="register.success.notification"
					doc:name="VM" />
				<!-- Callback to Merchant -->
				<expression-component doc:name="Expression">
					<![CDATA[
						memberMap = new java.util.HashMap();
						memberMap['msisdn'] = flowVars['msisdn'];
						memberMap['parentUsername'] = flowVars['parentUsername'];
						memberMap['parentName'] = flowVars['parentName'];
						memberMap['name'] = flowVars['name'];
						memberMap['email'] = flowVars['email'];
						memberMap['callbackUrl'] = flowVars['callbackUrl'];
						memberMap['authSecret'] = flowVars['authSecret'];
						memberMap['statusResponse'] = 'PROCESSED';
					payload = memberMap;]]>
				</expression-component>
				<flow-ref name="merchantCallbackFlow" />
			</when>
			<otherwise>
				<set-variable variableName="statusResponse" value="PIN Incorrect"
					doc:name="Variable" />
				<parse-template location="MemberRegistrationCredentials.tmp"
					mimeType="text/html" doc:name="Parse Template" />
			</otherwise>
		</choice>
		<set-property propertyName="content-type" value="text/html" />
	</flow>
	
	<flow name="memberUnBindFlow">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="Member/Unbind" allowedMethods="POST" doc:name="HTTP" />
		<message-filter doc:name="Filter favicon">
			<not-filter>
				<wildcard-filter pattern="/favicon.ico"
					caseSensitive="true" />
			</not-filter>
		</message-filter>
		<set-variable value="#[message.inboundProperties.'http.method']"
			variableName="method" doc:name="Variable" />
		<custom-transformer class="org.equinox.api.data.MessageTransformer"
			doc:name="Java" />
		<set-variable value="#[message.id]" variableName="correlationID"
			doc:name="Variable" />
		<set-variable variableName="originalPayload" value="#[payload]"
			doc:name="Variable" />
		<expression-transformer
			expression="#[originalPayload['transactionType']=org.apache.commons.lang.StringUtils.substringAfterLast(message.inboundProperties.'http.relative.path', '/');originalPayload]"
			doc:name="Expression" />
		<logger level="INFO"
			message="[{#[correlationID]} : MEMBER-UNBIND Request = #[originalPayload]]"
			doc:name="Logger" />
		<set-property value="memberUnBindValidationFlow" propertyName="type"
			doc:name="Property" />
		<set-property value="#[correlationID]" propertyName="messageID"
			doc:name="Property" />
		<vm:outbound-endpoint exchange-pattern="one-way"
			path="log.request" connector-ref="GrayLog_VM" doc:name="VM" />
		<flow-ref name="memberUnBindValidationFlow"
			doc:name="Flow Reference" />
		<set-property value="memberUnbindRequest" propertyName="type"
			doc:name="Property" />
		<set-property value="#[correlationID]" propertyName="messageID"
			doc:name="Property" />
		<vm:outbound-endpoint exchange-pattern="one-way"
			path="log.response" connector-ref="GrayLog_VM" doc:name="VM" />
		<exception-strategy ref="sessionException"
			doc:name="Reference Exception Strategy" />
	</flow>

	<flow name="merchantNotifFlow">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="Merchant/Notif" allowedMethods="POST" doc:name="HTTP" />
		<custom-transformer class="org.equinox.api.data.MessageTransformer"
			doc:name="Java" />
		<set-variable variableName="name" value="#[payload['name']]"
			doc:name="Variable" />
		<set-variable variableName="email" value="#[payload['email']]"
			doc:name="Variable" />
		<set-variable variableName="msisdn" value="#[payload['msisdn']]"
			doc:name="Variable" />
		<set-variable variableName="statusResponse" value="#[payload['status']]"
			doc:name="Variable" />
		<parse-template location="MerchantNotif.tmp" mimeType="text/html"
			doc:name="Parse Template" />
		<set-property propertyName="content-type" value="text/html" />
	</flow>
</mule>
