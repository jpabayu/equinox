<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:ws="http://www.mulesoft.org/schema/mule/ws" xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:jms="http://www.mulesoft.org/schema/mule/jms"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/jms http://www.mulesoft.org/schema/mule/jms/current/mule-jms.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/ws http://www.mulesoft.org/schema/mule/ws/current/mule-ws.xsd">

	<flow name="bankAccountListValidationFlow">
		<message-filter onUnaccepted="invalidParameterFlow"
			doc:name="Message">
			<and-filter doc:name="And">
				<expression-filter expression="#[originalPayload['token'] != null]" />
				<expression-filter expression="#[originalPayload['fromMember'] != null]" />
				<expression-filter expression="#[originalPayload['currentPage'] != null]" />
				<expression-filter expression="#[originalPayload['pageSize'] != null]" />
			</and-filter>
		</message-filter>

		<flow-ref name="tokenValidation" />
		<message-filter onUnaccepted="requestValidationFlow"
			doc:name="Message">
			<expression-filter expression="#[payload == 'ALLOWED']" />
		</message-filter>

		<flow-ref name="accessValidation" />
		<message-filter onUnaccepted="requestValidationFlow"
			doc:name="Message">
			<expression-filter expression="#[payload == 'ALLOWED']" />
		</message-filter>

		<choice>
			<when expression="#[originalPayload['validateHash'] == true]">
				<choice>
					<when
						expression="#[org.mule.util.StringUtils.isNotEmpty(originalPayload.'requestAuth')]">
						<flow-ref name="hashValidation" />
						<message-filter onUnaccepted="requestValidationFlow"
							doc:name="Message">
							<expression-filter expression="#[payload == 'ALLOWED']" />
						</message-filter>
						<set-payload value="#[originalPayload]" />
						<flow-ref name="loadBankAccountConfigFlow" />
					</when>
					<otherwise>
						<flow-ref name="invalidParameterFlow" />
					</otherwise>
				</choice>
			</when>
			<otherwise>
				<logger level="DEBUG" message="[SKIP HASH Validation]" />
				<set-payload value="#[originalPayload]" />
				<flow-ref name="loadBankAccountConfigFlow" />
			</otherwise>
		</choice>
	</flow>

<!-- 
	<flow name="bankAccountRemoveValidationFlow">
		<message-filter onUnaccepted="invalidParameterFlow"
			doc:name="Message">
			<and-filter doc:name="And">
				<expression-filter expression="#[originalPayload['id'] != null]" />
				<expression-filter expression="#[originalPayload['token'] != null]" />
				<expression-filter expression="#[originalPayload['fromMember'] != null]" />
			</and-filter>
		</message-filter>

		<flow-ref name="tokenValidation" />
		<message-filter onUnaccepted="requestValidationFlow"
			doc:name="Message">
			<expression-filter expression="#[payload == 'ALLOWED']" />
		</message-filter>

		<flow-ref name="accessValidation" />
		<message-filter onUnaccepted="requestValidationFlow"
			doc:name="Message">
			<expression-filter expression="#[payload == 'ALLOWED']" />
		</message-filter>

		<choice>
			<when expression="#[originalPayload['validateHash'] == true]">
				<choice>
					<when
						expression="#[org.mule.util.StringUtils.isNotEmpty(originalPayload.'requestAuth')]">
						<flow-ref name="hashValidation" />
						<message-filter onUnaccepted="requestValidationFlow"
							doc:name="Message">
							<expression-filter expression="#[payload == 'ALLOWED']" />
						</message-filter>
						<set-payload value="#[originalPayload]" />
						<flow-ref name="loadBankAccountConfigFlow" />
					</when>
					<otherwise>
						<flow-ref name="invalidParameterFlow" />
					</otherwise>
				</choice>
			</when>
			<otherwise>
				<logger level="DEBUG" message="[SKIP HASH Validation]" />
				<set-payload value="#[originalPayload]" />
				<flow-ref name="loadBankAccountConfigFlow" />
			</otherwise>
		</choice>
	</flow>
	
	 -->

	<flow name="bankAccountRegisterConfirmationValidationFlow">
		<message-filter onUnaccepted="invalidParameterFlow"
			doc:name="Message">
			<and-filter doc:name="And">
				<expression-filter expression="#[originalPayload['bankID'] != null]" />
				<expression-filter expression="#[originalPayload['fromMember'] != null]" />
				<expression-filter expression="#[originalPayload['accountName'] != null]" />
				<expression-filter expression="#[originalPayload['accountNo'] != null]" />
				<expression-filter expression="#[originalPayload['description'] != null]" />
				<expression-filter expression="#[originalPayload['token'] != null]" />
			</and-filter>
		</message-filter>

		<flow-ref name="tokenValidation" />
		<message-filter onUnaccepted="requestValidationFlow"
			doc:name="Message">
			<expression-filter expression="#[payload == 'ALLOWED']" />
		</message-filter>

		<flow-ref name="accessValidation" />
		<message-filter onUnaccepted="requestValidationFlow"
			doc:name="Message">
			<expression-filter expression="#[payload == 'ALLOWED']" />
		</message-filter>

		<choice>
			<when expression="#[originalPayload['validateHash'] == true]">
				<choice>
					<when
						expression="#[org.mule.util.StringUtils.isNotEmpty(originalPayload.'requestAuth')]">
						<flow-ref name="hashValidation" />
						<message-filter onUnaccepted="requestValidationFlow"
							doc:name="Message">
							<expression-filter expression="#[payload == 'ALLOWED']" />
						</message-filter>
						<set-payload value="#[originalPayload]" />
						<flow-ref name="bankAccountRegisterConfirmationConfigFlow" />
					</when>
					<otherwise>
						<flow-ref name="invalidParameterFlow" />
					</otherwise>
				</choice>
			</when>
			<otherwise>
				<logger level="DEBUG" message="[SKIP HASH Validation]" />
				<set-payload value="#[originalPayload]" />
				<flow-ref name="bankAccountRegisterConfirmationConfigFlow" />
			</otherwise>
		</choice>
	</flow>

	<flow name="confirmBankAccountRegisterValidationFlow">
		<message-filter onUnaccepted="invalidParameterFlow"
			doc:name="Message">
			<and-filter doc:name="And">
				<expression-filter expression="#[originalPayload['otp'] != null]" />
				<expression-filter expression="#[originalPayload['ticketID'] != null]" />
				<expression-filter expression="#[originalPayload['token'] != null]" />
			</and-filter>
		</message-filter>

		<flow-ref name="tokenValidation" />
		<message-filter onUnaccepted="requestValidationFlow"
			doc:name="Message">
			<expression-filter expression="#[payload == 'ALLOWED']" />
		</message-filter>

		<choice>
			<when expression="#[originalPayload['validateHash'] == true]">
				<choice>
					<when
						expression="#[org.mule.util.StringUtils.isNotEmpty(originalPayload.'requestAuth')]">
						<flow-ref name="hashValidation" />
						<message-filter onUnaccepted="requestValidationFlow"
							doc:name="Message">
							<expression-filter expression="#[payload == 'ALLOWED']" />
						</message-filter>
						<set-payload value="#[originalPayload]" />
						<flow-ref name="confirmBankAccountRegisterConfigFlow" />
					</when>
					<otherwise>
						<flow-ref name="invalidParameterFlow" />
					</otherwise>
				</choice>
			</when>
			<otherwise>
				<logger level="DEBUG" message="[SKIP HASH Validation]" />
				<set-payload value="#[originalPayload]" />
				<flow-ref name="confirmBankAccountRegisterConfigFlow" />
			</otherwise>
		</choice>
	</flow>
	
	<flow name="registerBankAccountValidationFlow">
		<message-filter onUnaccepted="invalidParameterFlow"
			doc:name="Message">
			<and-filter doc:name="And">
				<expression-filter expression="#[originalPayload['bankID'] != null]" />
				<expression-filter expression="#[originalPayload['accountName'] != null]" />
				<expression-filter expression="#[originalPayload['accountNo'] != null]" />
				<expression-filter expression="#[originalPayload['description'] != null]" />
				<expression-filter expression="#[originalPayload['token'] != null]" />
			</and-filter>
		</message-filter>

		<flow-ref name="tokenValidation" />
		<message-filter onUnaccepted="requestValidationFlow"
			doc:name="Message">
			<expression-filter expression="#[payload == 'ALLOWED']" />
		</message-filter>

		<choice>
			<when expression="#[originalPayload['validateHash'] == true]">
				<choice>
					<when
						expression="#[org.mule.util.StringUtils.isNotEmpty(originalPayload.'requestAuth')]">
						<flow-ref name="hashValidation" />
						<message-filter onUnaccepted="requestValidationFlow"
							doc:name="Message">
							<expression-filter expression="#[payload == 'ALLOWED']" />
						</message-filter>
						<set-payload value="#[originalPayload]" />
						<flow-ref name="registerBankAccountConfigFlow" />
					</when>
					<otherwise>
						<flow-ref name="invalidParameterFlow" />
					</otherwise>
				</choice>
			</when>
			<otherwise>
				<logger level="DEBUG" message="[SKIP HASH Validation]" />
				<set-payload value="#[originalPayload]" />
				<flow-ref name="registerBankAccountConfigFlow" />
			</otherwise>
		</choice>
	</flow>
</mule>
