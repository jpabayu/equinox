<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd">

	<flow name="qrisInquiryValidationFlow">
		<message-filter onUnaccepted="invalidParameterFlow"
			doc:name="Message">
			<and-filter doc:name="And">
				<expression-filter expression="#[originalPayload['token'] != null]" />
				<expression-filter expression="#[originalPayload['qrData'] != null]" />
				<expression-filter expression="#[originalPayload['fromMember'] != null]" />
			</and-filter>
		</message-filter>
		<flow-ref name="tokenValidation" doc:name="Flow Reference" />
		<message-filter onUnaccepted="errorResponseFlow"
			doc:name="Message">
			<expression-filter expression="#[payload == 'ALLOWED']" />
		</message-filter>
		<flow-ref name="accessValidation" doc:name="Flow Reference" />
		<message-filter onUnaccepted="errorResponseFlow"
			doc:name="Message">
			<expression-filter expression="#[payload == 'ALLOWED']" />
		</message-filter>
		<choice doc:name="Choice">
			<when expression="#[originalPayload['validateHash'] == true]">
				<choice doc:name="Choice">
					<when
						expression="#[org.mule.util.StringUtils.isNotEmpty(originalPayload['requestAuth'])]">
						<flow-ref name="hashValidation" doc:name="Flow Reference" />
						<message-filter onUnaccepted="errorResponseFlow"
							doc:name="Message">
							<expression-filter expression="#[payload == 'ALLOWED']" />
						</message-filter>
						<set-payload value="#[originalPayload]" doc:name="Set Payload" />
						<flow-ref name="qrisInquiryFlow" doc:name="Flow Reference" />
					</when>
					<otherwise>
						<flow-ref name="invalidParameterFlow" doc:name="Flow Reference" />
					</otherwise>
				</choice>
			</when>
			<otherwise>
				<set-variable variableName="logMessage" value="SKIP HASH Validation" doc:name="Variable"/>
				<flow-ref name="logInfoFlow" doc:name="Flow Reference"/>
				<set-payload value="#[originalPayload]" doc:name="Set Payload" />
				<flow-ref name="qrisInquiryFlow" doc:name="Flow Reference" />
			</otherwise>
		</choice>
	</flow>

	<flow name="qrisCreditValidationFlow">
		<message-filter onUnaccepted="htmlInvalidParameterFlow"
			doc:name="Message">
			<and-filter doc:name="And">
				<expression-filter expression="#[originalPayload['token'] != null]" />
				<expression-filter expression="#[originalPayload['transactionKey'] != null]" />
				<expression-filter expression="#[originalPayload['callbackUrl'] != null]" />
			</and-filter>
		</message-filter>
		<flow-ref name="tokenValidation" doc:name="Flow Reference" />
		<message-filter onUnaccepted="htmlErrorResponseFlow"
			doc:name="Message">
			<expression-filter expression="#[payload == 'ALLOWED']" />
		</message-filter>
		<choice doc:name="Choice">
			<when expression="#[originalPayload['validateHash'] == true]">
				<choice doc:name="Choice">
					<when
						expression="#[org.mule.util.StringUtils.isNotEmpty(originalPayload['requestAuth'])]">
						<flow-ref name="hashValidation" doc:name="Flow Reference" />
						<message-filter onUnaccepted="htmlErrorResponseFlow"
							doc:name="Message">
							<expression-filter expression="#[payload == 'ALLOWED']" />
						</message-filter>
						<set-payload value="#[originalPayload]" doc:name="Set Payload" />
						<flow-ref name="qrisCreditFlow" doc:name="Flow Reference" />
					</when>
					<otherwise>
						<flow-ref name="htmlInvalidParameterFlow" doc:name="Flow Reference" />
					</otherwise>
				</choice>
			</when>
			<otherwise>
				<set-variable variableName="logMessage" value="SKIP HASH Validation" doc:name="Variable"/>
				<flow-ref name="logInfoFlow" doc:name="Flow Reference"/>
				<set-payload value="#[originalPayload]" doc:name="Set Payload" />
				<flow-ref name="qrisCreditFlow" doc:name="Flow Reference" />
			</otherwise>
		</choice>
	</flow>
	
	<flow name="qrisCreditConfirmationValidationFlow">
		<message-filter onUnaccepted="htmlInvalidParameterFlow"
			doc:name="Message">
			<and-filter doc:name="And">
				<expression-filter expression="#[originalPayload['form-token'] != null]" />
				<expression-filter expression="#[originalPayload['form-transactionKey'] != null]" />
				<expression-filter expression="#[originalPayload['form-pin'] != null]" />
				<expression-filter expression="#[originalPayload['form-callbackUrl'] != null]" />
			</and-filter>
		</message-filter>
		<expression-component doc:name="Expression"><![CDATA[
			flowVars.originalPayload['token'] = flowVars.originalPayload['form-token'];
			flowVars.originalPayload.remove('form-token');
			
			flowVars.originalPayload['transactionKey'] = flowVars.originalPayload['form-transactionKey'];
			flowVars.originalPayload.remove('form-transactionKey');
			
			flowVars.originalPayload['pin'] = flowVars.originalPayload['form-pin'];
			flowVars.originalPayload.remove('form-pin');
			
			flowVars.originalPayload['callbackUrl'] = flowVars.originalPayload['form-callbackUrl'];
			flowVars.originalPayload.remove('form-callbackUrl');]]>
		</expression-component>
		
		<choice doc:name="Choice">
			<when expression="#[originalPayload['form-amount'] != 'null']">
				<expression-component doc:name="Expression"><![CDATA[
					flowVars.originalPayload['amount'] = new java.math.BigDecimal(flowVars.originalPayload['form-amount']);
					flowVars.originalPayload.remove('form-amount');]]>
				</expression-component>
			</when>
			<otherwise>
				<expression-component doc:name="Expression"><![CDATA[
					flowVars.originalPayload['amount'] = java.math.BigDecimal.ZERO;
					flowVars.originalPayload.remove('form-amount');]]>
				</expression-component>
			</otherwise>
		</choice>
		
		<choice doc:name="Choice">
			<when expression="#[originalPayload['form-convenienceFee'] != 'null']">
				<expression-component doc:name="Expression"><![CDATA[
					flowVars.originalPayload['convenienceFee'] = new java.math.BigDecimal(flowVars.originalPayload['form-convenienceFee']);
					flowVars.originalPayload.remove('form-convenienceFee');]]>
				</expression-component>
			</when>
			<otherwise>
				<expression-component doc:name="Expression"><![CDATA[
					flowVars.originalPayload['convenienceFee'] = java.math.BigDecimal.ZERO;
					flowVars.originalPayload.remove('form-convenienceFee');]]>
				</expression-component>
			</otherwise>
		</choice>
		
		<flow-ref name="tokenValidation" doc:name="Flow Reference" />
		<message-filter onUnaccepted="htmlErrorResponseFlow"
			doc:name="Message">
			<expression-filter expression="#[payload == 'ALLOWED']" />
		</message-filter>
		<flow-ref name="qrisCreditConfirmationFlow" doc:name="Flow Reference" />
	</flow>

	<flow name="qrisCheckStatusValidationFlow">
		<message-filter onUnaccepted="invalidParameterFlow"
			doc:name="Message">
			<and-filter doc:name="And">
				<expression-filter expression="#[originalPayload['token'] != null]" />
				<expression-filter expression="#[originalPayload['transactionKey'] != null]" />
			</and-filter>
		</message-filter>
		<flow-ref name="tokenValidation" doc:name="Flow Reference" />
		<message-filter onUnaccepted="errorResponseFlow"
			doc:name="Message">
			<expression-filter expression="#[payload == 'ALLOWED']" />
		</message-filter>
		<choice doc:name="Choice">
			<when expression="#[originalPayload['validateHash'] == true]">
				<choice doc:name="Choice">
					<when
						expression="#[org.mule.util.StringUtils.isNotEmpty(originalPayload['requestAuth'])]">
						<flow-ref name="hashValidation" doc:name="Flow Reference" />
						<message-filter onUnaccepted="errorResponseFlow"
							doc:name="Message">
							<expression-filter expression="#[payload == 'ALLOWED']" />
						</message-filter>
						<set-payload value="#[originalPayload]" doc:name="Set Payload" />
						<flow-ref name="qrisCheckStatusFlow" doc:name="Flow Reference" />
					</when>
					<otherwise>
						<flow-ref name="invalidParameterFlow" doc:name="Flow Reference" />
					</otherwise>
				</choice>
			</when>
			<otherwise>
				<set-variable variableName="logMessage" value="SKIP HASH Validation" doc:name="Variable"/>
				<flow-ref name="logInfoFlow" doc:name="Flow Reference"/>
				<set-payload value="#[originalPayload]" doc:name="Set Payload" />
				<flow-ref name="qrisCheckStatusFlow" doc:name="Flow Reference" />
			</otherwise>
		</choice>
	</flow>
</mule>
