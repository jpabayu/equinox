<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:vm="http://www.mulesoft.org/schema/mule/vm" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd">

	<flow name="memberPurchaseRequestFlow">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="Emoney/Purchase/Request" allowedMethods="POST" doc:name="HTTP" />
		<message-filter doc:name="Filter favicon">
			<not-filter>
				<wildcard-filter pattern="/favicon.ico"
					caseSensitive="true" />
			</not-filter>
		</message-filter>
		<set-variable value="#[message.inboundProperties.'http.method']"
			variableName="method" doc:name="Variable" />
		<custom-transformer class="org.equinox.api.data.MessageTransformer"
			doc:name="Java" />
		<set-variable value="#[message.id]" variableName="correlationID"
			doc:name="Variable" />
		<set-variable variableName="originalPayload" value="#[payload]"
			doc:name="Variable" />
		<set-variable variableName="parentUrl" value="${app.base.url}/Emoney/Purchase" 
			doc:name="Variable" />	
		<expression-transformer
			expression="#[originalPayload['transactionType']=org.apache.commons.lang.StringUtils.substringAfterLast(message.inboundProperties.'http.relative.path', '/');originalPayload]"
			doc:name="Expression" />
		<logger level="INFO"
			message="[{#[correlationID]} : PURCHASE REQUEST Request = #[originalPayload]]"
			doc:name="Logger" />
		<choice>
			<when expression="#[payload.get('description') == null]">
				<set-variable value="Purchase fello" variableName="defaultDescription"
					doc:name="Variable" />
			</when>
			<otherwise>
				<set-variable value="#[originalPayload['description']]"
					variableName="defaultDescription" doc:name="Variable" />
			</otherwise>
		</choice>
		<expression-transformer
			expression="#[originalPayload['description']=flowVars['defaultDescription'];originalPayload]"
			doc:name="Expression" />

		<choice>
			<when expression="#[payload.get('transferTypeID') == null]">
				<choice>
					<when expression="#[payload.get('terminalID') == null]">
						<set-variable value="0" variableName="defaultTransferTypeID"
							doc:name="Variable" />
					</when>
					<otherwise>
						<set-variable value="0"
							variableName="defaultTransferTypeID" doc:name="Variable" />
					</otherwise>
				</choice>
			</when>
			<otherwise>
				<set-variable value="#[originalPayload['transferTypeID']]"
					variableName="defaultTransferTypeID" doc:name="Variable" />
			</otherwise>
		</choice>
		<expression-transformer
			expression="#[originalPayload['transferTypeID']=flowVars['defaultTransferTypeID'];originalPayload]"
			doc:name="Expression" />

		<choice>
			<when expression="#[payload.get('terminalID') == null]">
				<set-variable value="0" variableName="defaultTerminalID"
					doc:name="Variable" />
			</when>
			<otherwise>
				<set-variable value="#[originalPayload['terminalID']]"
					variableName="defaultTerminalID" doc:name="Variable" />
			</otherwise>
		</choice>
		<expression-transformer
			expression="#[originalPayload['terminalID']=flowVars['defaultTerminalID'];originalPayload]"
			doc:name="Expression" />

		<set-property value="memberPurchaseRequest" propertyName="type"
			doc:name="Property" />
		<set-property value="#[correlationID]" propertyName="messageID"
			doc:name="Property" />
		<vm:outbound-endpoint exchange-pattern="one-way"
			path="log.request" connector-ref="GrayLog_VM" doc:name="VM" />
		<flow-ref name="memberPurchaseRequestValidationFlow"
			doc:name="Flow Reference" />
		<set-property value="memberPurchaseRequest" propertyName="type"
			doc:name="Property" />
		<set-property value="#[correlationID]" propertyName="messageID"
			doc:name="Property" />
		<vm:outbound-endpoint exchange-pattern="one-way"
			path="log.response" connector-ref="GrayLog_VM" doc:name="VM" />
		<exception-strategy ref="sessionException"
			doc:name="Reference Exception Strategy" />
	</flow>

	<flow name="memberPurchaseOTPFlow">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="Emoney/Purchase/OTP" allowedMethods="POST" doc:name="HTTP" />
		<set-variable value="#[message.inboundProperties.'http.method']"
			variableName="method" doc:name="Variable" />
		<custom-transformer class="org.equinox.api.data.MessageTransformer"
			doc:name="Java" />
		<set-variable value="#[message.id]" variableName="correlationID"
			doc:name="Variable" />
		<set-variable variableName="ticketID" value="#[payload['form-ticketid']]"
			doc:name="Variable" />
		<set-variable variableName="otp" value="#[payload['form-otp']]"
			doc:name="Variable" />
		<set-variable variableName="parentUrl" value="${app.base.url}/Emoney/Purchase" 
			doc:name="Variable" />
		<expression-component doc:name="Expression">
			<![CDATA[
			regMap = new java.util.HashMap();
			regMap['methodType']= 'GET';			
			regMap['name']= 'PurchaseOTPMap';
			regMap['key']= flowVars['ticketID'];
			payload = regMap;]]>
		</expression-component>
		<pooled-component>
			<spring-object bean="HazelcastStore" />
		</pooled-component>
		<set-variable value="#[payload['msisdn']]" variableName="msisdn"
			doc:name="Variable" />
		<set-variable value="#[payload['amount']]" variableName="amount"
			doc:name="Variable" />
		<set-variable value="#[payload['transferTypeID']]"
			variableName="transferTypeID" doc:name="Variable" />
		<set-variable value="#[payload['parentID']]"
			variableName="parentID" doc:name="Variable" />
		<set-variable value="#[payload['parentUsername']]"
			variableName="parentUsername" doc:name="Variable" />
		<set-variable value="#[payload['parentName']]"
			variableName="parentName" doc:name="Variable" />
		<set-variable variableName="callbackUrl" value="#[payload['callbackUrl']]"
			doc:name="Variable" />
		<set-variable variableName="authSecret" value="#[payload['authSecret']]"
			doc:name="Variable" />
		<set-variable variableName="traceNumber" value="#[payload['traceNumber']]"
			doc:name="Variable" />
		<set-variable variableName="description" value="#[payload['description']]"
			doc:name="Variable" />
		<set-variable variableName="statusResponse" value=""
			doc:name="Variable" />
		<set-variable value="#[payload['otp']]" variableName="otpCache"
			doc:name="Variable" />
		<choice doc:name="Choice">
			<when expression="#[flowVars['otpCache'] == flowVars['otp']]">
				<expression-component doc:name="Expression">
					<![CDATA[
						regMap = new java.util.HashMap();
						regMap['methodType']= 'DELETE';			
						regMap['name']= 'PurchaseOTPMap';
						regMap['key']= flowVars['ticketID'];
					payload = regMap;]]>
				</expression-component>
				<pooled-component>
					<spring-object bean="HazelcastStore" />
				</pooled-component>
				<expression-component doc:name="Expression">
					<![CDATA[
						cacheMap = new java.util.HashMap();
						cacheMap['msisdn'] = flowVars['msisdn'];
						cacheMap['parentID'] = flowVars['parentID'];
						cacheMap['parentUsername'] = flowVars['parentUsername'];
						cacheMap['parentName'] = flowVars['parentName'];
						cacheMap['amount'] = flowVars['amount'];
						cacheMap['callbackUrl'] = flowVars['callbackUrl'];
						cacheMap['transferTypeID'] = flowVars['transferTypeID'];
						cacheMap['traceNumber'] = flowVars['traceNumber'];
						cacheMap['description'] = flowVars['description'];
						cacheMap['authSecret'] = flowVars['authSecret'];
					payload = cacheMap;]]>
				</expression-component>
				<expression-component doc:name="Expression">
					<![CDATA[
						regMap = new java.util.HashMap();
						regMap['methodType']= 'PUT';			
						regMap['name']= 'CredentialTokenMap';
						regMap['key']= flowVars['ticketID'] ;
						regMap['value']= payload;
					payload = regMap;]]>
				</expression-component>
				<pooled-component>
					<spring-object bean="HazelcastStore" />
				</pooled-component>
				<parse-template location="MemberPurchaseCredentials.tmp"
					mimeType="text/html" doc:name="Parse Template" />
			</when>
			<otherwise>
				<set-variable variableName="statusResponse" value="OTP Expired/Not Match"
					doc:name="Variable" />
				<parse-template location="MemberPurchaseOTP.tmp"
					mimeType="text/html" doc:name="Parse Template" />
			</otherwise>
		</choice>
		<set-property propertyName="content-type" value="text/html"
			doc:name="Property" />
	</flow>

	<flow name="memberPurchaseCredentialFlow">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="Emoney/Purchase/Credential" allowedMethods="POST" doc:name="HTTP" />
		<set-variable value="#[message.inboundProperties.'http.method']"
			variableName="method" doc:name="Variable" />
		<custom-transformer class="org.equinox.api.data.MessageTransformer"
			doc:name="Java" />
		<set-variable value="#[message.id]" variableName="correlationID"
			doc:name="Variable" />
		<set-variable variableName="ticketID" value="#[payload['form-ticketid']]"
			doc:name="Variable" />
		<set-variable variableName="pin" value="#[payload['form-pin']]"
			doc:name="Variable" />
		<set-variable variableName="parentUrl" value="${app.base.url}/Emoney/Purchase" 
			doc:name="Variable" />
		<expression-component doc:name="Expression">
			<![CDATA[
			regMap = new java.util.HashMap();
			regMap['methodType']= 'GET';			
			regMap['name']= 'CredentialTokenMap';
			regMap['key']= flowVars['ticketID'];
			payload = regMap;]]>
		</expression-component>
		<pooled-component>
			<spring-object bean="HazelcastStore" />
		</pooled-component>
		<set-variable value="#[payload['msisdn']]" variableName="msisdn"
			doc:name="Variable" />
		<set-variable value="#[payload['amount']]" variableName="amount"
			doc:name="Variable" />
		<set-variable value="#[payload['transferTypeID']]"
			variableName="transferTypeID" doc:name="Variable" />
		<set-variable value="#[payload['parentID']]"
			variableName="parentID" doc:name="Variable" />
		<set-variable value="#[payload['parentUsername']]"
			variableName="parentUsername" doc:name="Variable" />
		<set-variable value="#[payload['parentName']]"
			variableName="parentName" doc:name="Variable" />
		<set-variable value="#[payload['callbackUrl']]"
			variableName="callbackUrl" doc:name="Variable" />
		<set-variable variableName="traceNumber" value="#[payload['traceNumber']]"
			doc:name="Variable" />
		<set-variable variableName="description" value="#[payload['description']]"
			doc:name="Variable" />
		<set-variable variableName="authSecret" value="#[payload['authSecret']]"
			doc:name="Variable" />
		<set-variable variableName="statusResponse" value=""
			doc:name="Variable" />

		<set-variable variableName="token" value="${api.ws.header.token}"
			doc:name="Variable" />
		<expression-component doc:name="Expression">
					<![CDATA[
						msg='<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.bellatrix.org/">
			   			<soapenv:Header>
			 		     <ser:headerAuth>
			 	        <token>' + flowVars['token'] + '</token>
						   </ser:headerAuth>
						   </soapenv:Header>
						   <soapenv:Body>
						      <ser:validateCredential>
						         <accessTypeID>1</accessTypeID>
						         <credential>' + flowVars['pin'] + '</credential>
						         <username>' + flowVars['msisdn'] + '</username>
						      </ser:validateCredential>
						   </soapenv:Body>
						</soapenv:Envelope>';
					payload = msg;]]>
		</expression-component>
		<http:request config-ref="HTTP_Request_Configuration"
			path="access" method="POST" doc:name="HTTP">
			<http:request-builder>
				<http:header headerName="soapaction" value="&quot;validateCredential&quot;" />
			</http:request-builder>
		</http:request>
		<byte-array-to-string-transformer
			doc:name="Byte Array to String" />
		<set-variable value="#[xpath3('//status/message')]"
			variableName="status" doc:name="Variable" />
		<choice doc:name="Choice">
			<when expression="#[flowVars['status'] == 'VALID']">
				<set-variable variableName="tokennc" value="${api.ws.header.token.nc}"
					doc:name="Variable" />
				<expression-component doc:name="Expression">
							<![CDATA[
								msg='<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.bellatrix.org/">
									   <soapenv:Header>
									      <ser:headerAuth>
									         <token>' + flowVars['tokennc'] + '</token>
									      </ser:headerAuth>
									   </soapenv:Header>
									   <soapenv:Body>
									      <ser:doPayment>
									         <amount>' + flowVars['amount'] + '</amount>
									         <description>' + flowVars['description'] + '</description>
									         <fromMember>' + flowVars['msisdn'] + '</fromMember>
									         <toMember>' + flowVars['parentUsername'] + '</toMember>
									         <traceNumber>' + flowVars['traceNumber'] + '</traceNumber>
									         <transferTypeID>' + flowVars['transferTypeID'] + '</transferTypeID>
									      </ser:doPayment>
									   </soapenv:Body>
									</soapenv:Envelope>';
								payload = msg;]]>
				</expression-component>
				<logger
					message="[#[flowVars.correlationID] (DO PAYMENT REQUEST) : #[message.payloadAs(java.lang.String)]]"
					level="INFO" doc:name="Logger" />
				<http:request config-ref="HTTP_Request_Configuration"
					path="payments" method="POST" doc:name="HTTP">
					<http:request-builder>
						<http:header headerName="SOAPAction" value="doPayment" />
					</http:request-builder>
				</http:request>
				<byte-array-to-string-transformer
					doc:name="Byte Array to String" />
				<logger
					message="[#[flowVars.correlationID] (DO PAYMENT RESPONSE) : #[message.payloadAs(java.lang.String)]]"
					level="INFO" doc:name="Logger" />
				<set-variable value="#[xpath3('//status/message')]"
					variableName="status" doc:name="Variable" />
				<set-variable value="#[xpath3('//traceNumber')]"
					variableName="traceNumber" doc:name="Variable" />
				<set-variable value="#[xpath3('//transactionNumber')]"
					variableName="transactionNumber" doc:name="Variable" />
				<set-variable value="#[xpath3('//fromMember/name')]"
					variableName="fromName" doc:name="Variable" />
				<set-variable value="#[xpath3('//fromMember/username')]"
					variableName="fromUsername" doc:name="Variable" />
				<set-variable value="#[xpath3('//toMember/name')]"
					variableName="toName" doc:name="Variable" />
				<set-variable value="#[xpath3('//toMember/username')]"
					variableName="toUsername" doc:name="Variable" />
				<set-variable value="#[xpath3('//transferType/name')]"
					variableName="trxType" doc:name="Variable" />
				<choice doc:name="Choice">
					<when expression="#[flowVars['status'] == 'PROCESSED']">
						<expression-component doc:name="Expression">
							<![CDATA[
								regMap = new java.util.HashMap();
								regMap['methodType']= 'DELETE';			
								regMap['name']= 'CredentialTokenMap';
								regMap['key']= flowVars['ticketID'];
							payload = regMap;]]>
						</expression-component>
						<pooled-component>
							<spring-object bean="HazelcastStore" />
						</pooled-component>
						<set-variable
							value="62#[org.apache.commons.lang.StringUtils.substring(flowVars['msisdn'], 1)]"
							variableName="msisdn" doc:name="Variable" />
						<expression-component doc:name="Expression">
							<![CDATA[
								cacheMap = new java.util.HashMap();
								cacheMap['msisdn'] = flowVars['msisdn'];
								cacheMap['parentName'] = flowVars['parentName'];
								cacheMap['amount'] = flowVars['amount'];
								cacheMap['transactionDate'] = org.equinox.api.process.Utils.GetCurrentDate();
								cacheMap['transactionNumber'] = flowVars['transactionNumber'];
							payload = cacheMap;]]>
						</expression-component>
						<logger level="INFO" message="Notification Purchase: #[payload]"
							doc:name="Logger" />
						<vm:outbound-endpoint exchange-pattern="one-way"
							connector-ref="Notification_VM" path="purchase.success.notification"
							doc:name="VM" />
						<!-- Callback to Merchant -->
						<expression-component doc:name="Expression">
							<![CDATA[
								memberMap = new java.util.HashMap();
								memberMap['msisdn'] = flowVars['msisdn'];
								memberMap['parentUsername'] = flowVars['parentUsername'];
								memberMap['parentName'] = flowVars['parentName'];
								memberMap['amount'] = flowVars['amount'];
								memberMap['traceNumber'] = flowVars['traceNumber'];
								memberMap['description'] = flowVars['description'];
								memberMap['transactionNumber'] = flowVars['transactionNumber'];
								memberMap['transactionDate'] = org.equinox.api.process.Utils.GetCurrentDate();
								memberMap['callbackUrl'] = flowVars['callbackUrl'];
								memberMap['authSecret'] = flowVars['authSecret'];
								memberMap['statusResponse'] = 'PROCESSED';
							payload = memberMap;]]>
						</expression-component>
						<flow-ref name="paymentCallback" doc:name="Flow Reference" />
					</when>
					<otherwise>
						<expression-component doc:name="Expression">
							<![CDATA[
								regMap = new java.util.HashMap();
								regMap['methodType']= 'DELETE';			
								regMap['name']= 'CredentialTokenMap';
								regMap['key']= flowVars['ticketID'];
							payload = regMap;]]>
						</expression-component>
						<pooled-component>
							<spring-object bean="HazelcastStore" />
						</pooled-component>
						<!-- Callback to Merchant -->
						<expression-component doc:name="Expression">
							<![CDATA[
								memberMap = new java.util.HashMap();
								memberMap['msisdn'] = flowVars['msisdn'];
								memberMap['parentUsername'] = flowVars['parentUsername'];
								memberMap['parentName'] = flowVars['parentName'];
								memberMap['amount'] = flowVars['amount'];
								memberMap['traceNumber'] = flowVars['traceNumber'];
								memberMap['description'] = flowVars['description'];
								memberMap['transactionNumber'] = flowVars['transactionNumber'];
								memberMap['callbackUrl'] = flowVars['callbackUrl'];
								memberMap['authSecret'] = flowVars['authSecret'];
								memberMap['statusResponse'] = flowVars['status'];
							payload = memberMap;]]>
						</expression-component>
						<flow-ref name="paymentCallback" doc:name="Flow Reference" />
					</otherwise>
				</choice>
			</when>
			<when expression="#[flowVars['status'] == 'INVALID']">
				<set-variable variableName="statusResponse" value="Incorrect PIN"
					doc:name="Variable" />
				<parse-template location="MemberPurchaseCredentials.tmp"
					mimeType="text/html" doc:name="Parse Template" />
			</when>
			<otherwise>
				<expression-component doc:name="Expression">
					<![CDATA[
						regMap = new java.util.HashMap();
						regMap['methodType']= 'DELETE';			
						regMap['name']= 'CredentialTokenMap';
						regMap['key']= flowVars['ticketID'];
					payload = regMap;]]>
				</expression-component>
				<pooled-component>
					<spring-object bean="HazelcastStore" />
				</pooled-component>
				<!-- Callback to Merchant -->
				<expression-component doc:name="Expression">
					<![CDATA[
						memberMap = new java.util.HashMap();
						memberMap['msisdn'] = flowVars['msisdn'];
						memberMap['parentUsername'] = flowVars['parentUsername'];
						memberMap['parentName'] = flowVars['parentName'];
						memberMap['amount'] = flowVars['amount'];
						memberMap['traceNumber'] = flowVars['traceNumber'];
						memberMap['description'] = flowVars['description'];
						memberMap['transactionNumber'] = flowVars['transactionNumber'];
						memberMap['callbackUrl'] = flowVars['callbackUrl'];
						memberMap['authSecret'] = flowVars['authSecret'];
						memberMap['statusResponse'] = 'MEMBER_BLOCKED';
					payload = memberMap;]]>
				</expression-component>
				<flow-ref name="paymentCallback" doc:name="Flow Reference" />
			</otherwise>
		</choice>
		<set-property propertyName="content-type" value="text/html"
			doc:name="Property" />
	</flow>

	<flow name="merchantPurchaseNotifFlow">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="Merchant/Purchase/Notif" allowedMethods="POST" doc:name="HTTP" />
		<set-variable value="#[message.inboundProperties.'http.method']"
			variableName="method" doc:name="Variable" />
		<custom-transformer class="org.equinox.api.data.MessageTransformer"
			doc:name="Java" />
		<set-variable variableName="originalPayload" value="#[payload]"
			doc:name="Variable" />
		<set-variable variableName="amount" value="#[payload['amount']]"
			doc:name="Variable" />
		<set-variable variableName="traceNumber" value="#[payload['traceNumber']]"
			doc:name="Variable" />
		<set-variable variableName="transactionNumber"
			value="#[payload['transactionNumber']]" doc:name="Variable" />
		<set-variable variableName="transactionDate"
			value="#[payload['transactionDate']]" doc:name="Variable" />
		<set-variable variableName="msisdn" value="#[payload['msisdn']]"
			doc:name="Variable" />
		<set-variable variableName="description" value="#[payload['description']]"
			doc:name="Variable" />
		<set-variable variableName="statusResponse" value="#[payload['status']]"
			doc:name="Variable" />

		<parse-template location="MerchantPurchaseNotif.tmp"
			mimeType="text/html" doc:name="Parse Template" />
		<set-property propertyName="content-type" value="text/html"
			doc:name="Property" />
	</flow>
</mule>
