<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:vm="http://www.mulesoft.org/schema/mule/vm" xmlns:ws="http://www.mulesoft.org/schema/mule/ws"
	xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:jms="http://www.mulesoft.org/schema/mule/jms" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/jms http://www.mulesoft.org/schema/mule/jms/current/mule-jms.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/ws http://www.mulesoft.org/schema/mule/ws/current/mule-ws.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd">

	<flow name="changeCredentialConfigFlow">
		<set-variable variableName="reqID" value="#[message.id]"
			doc:name="Variable" />
		<expression-component doc:name="Expression">
			<![CDATA[
			regMap = new java.util.HashMap();
			regMap['methodType']= 'PUT';			
			regMap['name']= 'CredentialTokenMap';
			regMap['key']= flowVars['reqID'];
			regMap['value']= originalPayload['fromMember'];
			payload = regMap;]]>
		</expression-component>
		<pooled-component>
			<spring-object bean="HazelcastStore" />
		</pooled-component>
		<expression-component doc:name="Expression">
			<![CDATA[
			regMap = new java.util.HashMap();
			regMap['ticketID']= flowVars['reqID'];			
			regMap['email']= flowVars['fromEmail'];
			payload = regMap;]]>
		</expression-component>
		<vm:outbound-endpoint exchange-pattern="one-way"
			connector-ref="Notification_VM" path="change.credential.notification"
			doc:name="VM" />
		<expression-component doc:name="Expression">
			<![CDATA[
				reqIdMap = new java.util.HashMap();
				reqIdMap['requestID']= flowVars['reqID'];
				responseList = new java.util.LinkedList();
				responseList = [reqIdMap];
				responseMap = new java.util.HashMap();
				responseMap['ChangeCredentialResponse']= responseList;
				responseMap['status']= org.equinox.api.data.StatusBuilder.getStatus('PROCESSED');			
				payload = responseMap;]]>
		</expression-component>
		<flow-ref name="responseHandlerFlow" doc:name="Flow Reference" />
	</flow>
	
	<flow name="changeCredentialByOTPConfigFlow">
		<set-variable variableName="tokennc" value="${api.ws.header.token.nc}"
			doc:name="Variable" />
		<expression-component doc:name="Expression">
		<![CDATA[
			msg='<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.bellatrix.org/">
				   <soapenv:Header>
				      <ser:headerAuth>
				         <token>' + flowVars['token'] + '</token>
				      </ser:headerAuth>
				   </soapenv:Header>
				   <soapenv:Body>
				      <ser:changeCredential>
				         <accessTypeID>' + globalConfig['member.default.pin.access.type.id'] + '</accessTypeID>
				         <newCredential>' + originalPayload['newpassword'] + '</newCredential>
				         <oldCredential>' + originalPayload['oldpassword'] + '</oldCredential>
				         <username>' + payload['fromMember'] + '</username>
				      </ser:changeCredential>
				   </soapenv:Body>
				</soapenv:Envelope>';
			payload = msg;]]>
		</expression-component>
		<set-payload
			value="#[org.apache.commons.codec.binary.StringUtils.newStringUtf8(payload.getBytes())]"
			doc:name="Set Payload" />
		<http:request config-ref="HTTP_Request_Configuration"
			path="access" method="POST" doc:name="HTTP">
			<http:request-builder>
				<http:header headerName="soapaction" value="&quot;changeCredential&quot;" />
			</http:request-builder>
			<http:success-status-code-validator
				values="200,500" />
		</http:request>
		<byte-array-to-string-transformer
			doc:name="Byte Array to String" />
		<set-variable variableName="faultString" value="#[xpath3('//faultstring')]"
			doc:name="Variable" />
		<choice>
			<when expression="#[originalPayload['ticketID'] != null]">
				<expression-component doc:name="Expression">
					<![CDATA[
						regMap = new java.util.HashMap();
						regMap['methodType']= 'DELETE';			
						regMap['name']= 'OTPRequestMap';
						regMap['key']= originalPayload['ticketID'];
					payload = regMap;]]>
				</expression-component>
				<pooled-component>
					<spring-object bean="HazelcastStore" />
				</pooled-component>
			</when>
			<otherwise>
				<logger level="INFO" message="[TICKET ID is #[originalPayload['ticketID']]]" />
			</otherwise>
		</choice>
		<choice doc:name="Choice">
			<when expression="#[org.mule.util.StringUtils.isNotEmpty(faultString)]">
				<expression-component doc:name="Expression">
					<![CDATA[
						responseMap = new java.util.HashMap();
						responseMap['status']= org.equinox.api.data.StatusBuilder.getStatus('INVALID');			
					payload = responseMap;]]>
				</expression-component>
			</when>
			<otherwise>
				<expression-component doc:name="Expression">
					<![CDATA[
						responseMap = new java.util.HashMap();
						responseMap['status']= org.equinox.api.data.StatusBuilder.getStatus('PROCESSED');			
					payload = responseMap;]]>
				</expression-component>
			</otherwise>
		</choice>
		<flow-ref name="responseHandlerFlow" doc:name="Flow Reference" />
	</flow>
</mule>
